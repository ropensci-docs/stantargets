[{"path":"https://docs.ropensci.org/stantargets/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation.","code":""},{"path":"https://docs.ropensci.org/stantargets/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"participating project, agree abide code conduct.","code":""},{"path":"https://docs.ropensci.org/stantargets/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"Anyone can start contribute issue discussion thread. Issues mainly bug reports package maintenance, discussions usage help brainstorming. Please respect following guidelines. posting new issue discussion, please take moment search existing threads order avoid duplication. bug reports: can, please install latest GitHub version stantargets (.e. remotes::install_github(\"ropensci/stantargets\")) verify issue still persists. Describe issue prose clearly concisely possible. Runnable: post enough R code data onlooker can create error computer. Minimal: reduce runtime wherever possible remove complicated details irrelevant issue hand. Readable: format code according tidyverse style guide.","code":""},{"path":"https://docs.ropensci.org/stantargets/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"External code contributions extremely helpful right circumstances. recommended steps. Prior contribution, please propose idea new issue thread maintainer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code maintainer pull request thread. everything looks good, maintainer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code according tidyverse style guide check formatting lint_package() function lintr package. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevant GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough official author contributor status, please add Authors@R field DESCRIPTION file.","code":""},{"path":"https://docs.ropensci.org/stantargets/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Eli Lilly Company Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/stantargets/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Prework","title":"Prework","text":"understand agree repository’s code conduct. understand agree repository’s contributing guidelines. already submitted issue issue tracker discuss idea maintainer.","code":""},{"path":"https://docs.ropensci.org/stantargets/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Prework","text":"Ref: #","code":""},{"path":"https://docs.ropensci.org/stantargets/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Prework","text":"Please explain purpose scope contribution.","code":""},{"path":"https://docs.ropensci.org/stantargets/articles/introduction.html","id":"multiple-models","dir":"Articles","previous_headings":"","what":"Multiple models","title":"Introduction to stantargets","text":"tar_stan_mcmc() related functions allow supply multiple models stan_files. , model run dataset. Consider new model y.stan. include y.stan, add stan_files argument tar_stan_mcmc(). graph , notice *_x targets *_y targets connected example_data upstream.","code":"lines <- \"data {   int <lower = 1> n;   vector[n] x;   vector[n] y;   real true_beta; } parameters {   real beta; } model {   y ~ normal(x * x * beta, 1); // Regress on x^2 instead of x.   beta ~ normal(0, 1); }\" writeLines(lines, \"y.stan\") #> [1] FALSE # _targets.R library(targets) library(stantargets)  generate_data <- function(n = 10) {   true_beta <- stats::rnorm(n = 1, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- stats::rnorm(n, x * true_beta, 1)   list(n = n, x = x, y = y, true_beta = true_beta) }  list(   tar_stan_mcmc(     example,     c(\"x.stan\", \"y.stan\"), # another model     generate_data(),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ),   tar_stan_summary(     custom_summary,     fit = example_mcmc_x,     summaries = list(~posterior::quantile2(.x, probs = c(0.25, 0.75)))   ) ) tar_visnetwork(targets_only = TRUE) #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #>"},{"path":"https://docs.ropensci.org/stantargets/articles/introduction.html","id":"generated-quantities","dir":"Articles","previous_headings":"","what":"Generated quantities","title":"Introduction to stantargets","text":"possible use CmdStanMCMC object one run simulate generated quantities downstream. example, tar_stan_gq_rep_summaries() function takes single CmdStanMCMC object, produces multiple replications generated quantities multiple models, aggregates summaries . following pipeline uses technique repeatedly draw posterior predictive distribution. Since defined many objects pipeline, extra important check graph sure everything connected. , run computation. original MCMC already date, run targets relevant generated quantities. Finally, read summaries posterior predictive samples.","code":"lines <- \"data {   int <lower = 1> n;   vector[n] x;   vector[n] y; } parameters {   real beta; } model {   y ~ normal(x * beta, 1);   beta ~ normal(0, 1); } generated quantities {   array[n] real y_rep = normal_rng(x * beta, 1); // posterior predictive draws }\" writeLines(lines, \"gen.stan\") # _targets.R library(targets) library(stantargets)  generate_data <- function(n = 10) {   true_beta <- stats::rnorm(n = 1, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- stats::rnorm(n, x * true_beta, 1)   list(n = n, x = x, y = y, true_beta = true_beta) }  list(   tar_stan_mcmc(     example,     \"x.stan\",     generate_data(),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ),   tar_stan_gq_rep_summary(     postpred,     stan_files = \"gen.stan\",     fitted_params = example_mcmc_x, # one CmdStanFit object     data = generate_data(), # Function runs once per rep.     batches = 2, # 2 dynamic branches     reps = 5, # 5 replications per branch     quiet = TRUE,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) tar_visnetwork(targets_only = TRUE) #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_make() #> ▶ dispatched target postpred_batch #> ● completed target postpred_batch [0.001 seconds] #> ▶ dispatched target postpred_file_gen #> ● completed target postpred_file_gen [15.5 seconds] #> ✔ skipped target example_data #> ✔ skipped target example_file_x #> ▶ dispatched branch postpred_data_f1c15717 #> ● completed branch postpred_data_f1c15717 [0.01 seconds] #> ▶ dispatched branch postpred_data_e945e52d #> ● completed branch postpred_data_e945e52d [0.006 seconds] #> ● completed pattern postpred_data #> ✔ skipped target example_mcmc_x #> ▶ dispatched branch postpred_gen_0a30dca5 #> ● completed branch postpred_gen_0a30dca5 [3.321 seconds] #> ▶ dispatched branch postpred_gen_6a425504 #> ● completed branch postpred_gen_6a425504 [3.153 seconds] #> ● completed pattern postpred_gen #> ✔ skipped target example_diagnostics_x #> ✔ skipped target example_summary_x #> ✔ skipped target example_draws_x #> ▶ dispatched target postpred #> ● completed target postpred [0.001 seconds] #> ▶ ended pipeline [22.754 seconds] #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_read(postpred) #> # A tibble: 100 × 16 #>    variable    mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail #>    <chr>      <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #>  1 y_rep[1]   0.864  0.876 1.10  1.11  -0.982  2.62  1.00    2628.    3102. #>  2 y_rep[2]   0.675  0.687 1.04  1.01  -1.06   2.38  1.00    3364.    3477. #>  3 y_rep[3]   0.514  0.521 1.05  1.05  -1.23   2.21  1.00    3847.    3974. #>  4 y_rep[4]   0.343  0.349 1.01  0.996 -1.29   2.08  1.00    4192.    3640. #>  5 y_rep[5]   0.147  0.102 1.02  1.02  -1.55   1.79  1.00    4051.    3855. #>  6 y_rep[6]  -0.127 -0.112 1.00  0.999 -1.81   1.49  1.00    4345.    3582. #>  7 y_rep[7]  -0.284 -0.294 0.994 0.980 -1.89   1.35  1.00    3869.    3582. #>  8 y_rep[8]  -0.484 -0.493 1.03  0.987 -2.16   1.21  1.00    3153.    3467. #>  9 y_rep[9]  -0.709 -0.735 1.06  1.07  -2.43   1.06  1.00    3085.    3560. #> 10 y_rep[10] -0.852 -0.858 1.13  1.13  -2.69   1.00  1.00    2374.    3600. #> # ℹ 90 more rows #> # ℹ 6 more variables: .join_data <dbl>, .rep <chr>, .dataset_id <chr>, #> #   .seed <int>, .file <chr>, .name <chr>"},{"path":"https://docs.ropensci.org/stantargets/articles/introduction.html","id":"more-information","dir":"Articles","previous_headings":"","what":"More information","title":"Introduction to stantargets","text":"targets, please visit reference website https://docs.ropensci.org/targets/ user manual https://books.ropensci.org/targets/. manual walks though advanced features targets high-performance computing cloud storage support.","code":""},{"path":"https://docs.ropensci.org/stantargets/articles/simulation.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Bayesian simulation pipelines with stantargets","text":"introductory vignette vignette caters Bayesian data analysis workflows datasets analyze. However, sometimes desirable run one Bayesian models repeatedly across multiple simulated datasets. Examples: Validate implementation Bayesian model using simulation. Simulate randomized controlled experiment explore frequentist properties power Type error. vignette focuses (1).","code":""},{"path":"https://docs.ropensci.org/stantargets/articles/simulation.html","id":"example-project","dir":"Articles","previous_headings":"","what":"Example project","title":"Bayesian simulation pipelines with stantargets","text":"Visit https://github.com/wlandau/stantargets-example-validation example project based vignette. example RStudio Cloud workspace allows run project web browser.","code":""},{"path":"https://docs.ropensci.org/stantargets/articles/simulation.html","id":"interval-based-model-validation-pipeline","dir":"Articles","previous_headings":"","what":"Interval-based model validation pipeline","title":"Bayesian simulation pipelines with stantargets","text":"particular example uses concept calibration Bob Carpenter explains (Carpenter 2017). goal simulate multiple datasets model , analyze dataset, assess often estimated posterior intervals cover true parameters prior predictive simulations. coverage systematically different nominal, evidence model implemented correctly. quantile method Cook, Gelman, Rubin (2006) generalizes concept, simulation-based calibration (Talts et al. 2020) generalizes . interval-based technique featured vignette robust SBC, may expedient large models require visual inspection multiple histograms. See later section vignette example simulation-based calibration model. Next, define pipeline simulate multiple datasets fit dataset model. data-generating function, put true parameter values simulation special .join_data list. stantargets automatically join elements .join_data correspondingly named variables summary output. make super easy check often posterior intervals capture truth. scale, generate 10 datasets (5 batches 2 replications ) run model 10 datasets.1 default, 10 model runs computes 4 MCMC chains 2000 MCMC iterations (including burn-) can adjust chains, iter_sampling, iter_warmup arguments tar_stan_mcmc_rep_summary(). now pipeline runs model 10 times: 5 batches (branch targets) 2 replications per batch. Run computation tar_make() result aggregated data frame summary statistics, .rep column distinguishes among individual replicates. posterior intervals beta columns q2.5 q97.5. thanks .join_data simulate_data(), special .join_data column output indicate true value parameter simulation. Now, let’s assess often estimated 95% posterior intervals capture true values beta. model implemented correctly, coverage value close 95%. (Ordinarily, increase number batches reps per batch run batches parallel computing.) maximum reproducibility, express coverage assessment custom function target pipeline. new coverage target outdated target, connected upstream model target. run pipeline, coverage assessment run. way, skip expensive computation simulating datasets running MCMC multiple times.","code":"lines <- \"data {   int <lower = 1> n;   vector[n] x;   vector[n] y; } parameters {   vector[2] beta; } model {   y ~ normal(beta[1] + x * beta[2], 1);   beta ~ normal(0, 1); }\" writeLines(lines, \"model.stan\") # _targets.R library(targets) library(stantargets) options(crayon.enabled = FALSE) # Use computer memory more sparingly: tar_option_set(memory = \"transient\", garbage_collection = TRUE)  simulate_data <- function(n = 10L) {   beta <- rnorm(n = 2, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- rnorm(n, beta[1] + x * beta[2], 1)   list(     n = n,     x = x,     y = y,     .join_data = list(beta = beta)   ) }  list(   tar_stan_mcmc_rep_summary(     model,     \"model.stan\",     simulate_data(), # Runs once per rep.     batches = 5, # Number of branch targets.     reps = 2, # Number of model reps per branch target.     variables = \"beta\",     summaries = list(       ~posterior::quantile2(.x, probs = c(0.025, 0.975))     ),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) tar_visnetwork() #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_make() #> ▶ dispatched target model_batch #> ● completed target model_batch [0.001 seconds] #> ▶ dispatched target model_file_model #> ● completed target model_file_model [15.867 seconds] #> ▶ dispatched branch model_data_b0b9380a #> ● completed branch model_data_b0b9380a [0.008 seconds] #> ▶ dispatched branch model_data_ffcdb73c #> ● completed branch model_data_ffcdb73c [0.003 seconds] #> ▶ dispatched branch model_data_b968a03a #> ● completed branch model_data_b968a03a [0.003 seconds] #> ▶ dispatched branch model_data_f8763cb2 #> ● completed branch model_data_f8763cb2 [0.003 seconds] #> ▶ dispatched branch model_data_0bfdabdc #> ● completed branch model_data_0bfdabdc [0.003 seconds] #> ● completed pattern model_data #> ▶ dispatched branch model_model_5d061b58 #> ● completed branch model_model_5d061b58 [1.536 seconds] #> ▶ dispatched branch model_model_a9336683 #> ● completed branch model_model_a9336683 [1.318 seconds] #> ▶ dispatched branch model_model_bde6a6d6 #> ● completed branch model_model_bde6a6d6 [1.323 seconds] #> ▶ dispatched branch model_model_384f982f #> ● completed branch model_model_384f982f [1.323 seconds] #> ▶ dispatched branch model_model_0d59666a #> ● completed branch model_model_0d59666a [1.321 seconds] #> ● completed pattern model_model #> ▶ dispatched target model #> ● completed target model [0 seconds] #> ▶ ended pipeline [24.006 seconds] #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_load(model) model #> # A tibble: 20 × 9 #>    variable    q2.5   q97.5 .join_data .rep     .dataset_id    .seed .file .name #>    <chr>      <dbl>   <dbl>      <dbl> <chr>    <chr>          <int> <chr> <chr> #>  1 beta[1]   0.0318  1.24       0.751  99bfcc99 model_data_b… 1.49e9 mode… model #>  2 beta[2]  -1.04    0.734     -0.592  99bfcc99 model_data_b… 1.49e9 mode… model #>  3 beta[1]   0.472   1.63       1.19   051ce394 model_data_b… 2.04e9 mode… model #>  4 beta[2]  -0.844   0.911      0.0635 051ce394 model_data_b… 2.04e9 mode… model #>  5 beta[1]   1.35    2.52       2.15   4258cff2 model_data_f… 4.83e8 mode… model #>  6 beta[2]  -1.94   -0.152     -1.71   4258cff2 model_data_f… 4.83e8 mode… model #>  7 beta[1]  -0.230   0.946      0.271  96e3f8e9 model_data_f… 6.64e8 mode… model #>  8 beta[2]  -1.73    0.0476    -0.407  96e3f8e9 model_data_f… 6.64e8 mode… model #>  9 beta[1]   0.348   1.51       0.758  9e8ac8fd model_data_b… 1.33e9 mode… model #> 10 beta[2]  -0.794   0.962      0.426  9e8ac8fd model_data_b… 1.33e9 mode… model #> 11 beta[1]  -0.864   0.322     -0.541  289ec442 model_data_b… 8.94e8 mode… model #> 12 beta[2]  -1.24    0.500     -0.251  289ec442 model_data_b… 8.94e8 mode… model #> 13 beta[1]  -0.194   0.998      0.618  7b68a6d3 model_data_f… 3.71e7 mode… model #> 14 beta[2]  -0.551   1.17      -0.245  7b68a6d3 model_data_f… 3.71e7 mode… model #> 15 beta[1]  -0.913   0.254     -0.160  fb1ab4a4 model_data_f… 1.33e9 mode… model #> 16 beta[2]  -2.52   -0.751     -1.07   fb1ab4a4 model_data_f… 1.33e9 mode… model #> 17 beta[1]  -2.79   -1.63      -1.81   7640ef0e model_data_0… 5.73e8 mode… model #> 18 beta[2]  -2.44   -0.673     -1.22   7640ef0e model_data_0… 5.73e8 mode… model #> 19 beta[1]   0.483   1.64       1.43   c9c1f653 model_data_0… 1.83e9 mode… model #> 20 beta[2]  -1.98   -0.294     -1.19   c9c1f653 model_data_0… 1.83e9 mode… model library(dplyr) model %>%   group_by(variable) %>%   summarize(coverage = mean(q2.5 < .join_data & .join_data < q97.5)) #> # A tibble: 2 × 2 #>   variable coverage #>   <chr>       <dbl> #> 1 beta[1]         1 #> 2 beta[2]         1 # _targets.R library(targets) library(stantargets)  simulate_data <- function(n = 10L) {   beta <- rnorm(n = 2, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- rnorm(n, beta[1] + x * beta[2], 1)   list(     n = n,     x = x,     y = y,     .join_data = list(beta = beta)   ) }  list(   tar_stan_mcmc_rep_summary(     model,     \"model.stan\",     simulate_data(),     batches = 5, # Number of branch targets.     reps = 2, # Number of model reps per branch target.     variables = \"beta\",     summaries = list(       ~posterior::quantile2(.x, probs = c(0.025, 0.975))     ),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ),   tar_target(     coverage,     model %>%       group_by(variable) %>%       summarize(coverage = mean(q2.5 < .join_data & .join_data < q97.5))   ) ) tar_visnetwork() #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_make() #> ✔ skipped target model_batch #> ✔ skipped target model_file_model #> ✔ skipped branch model_data_b0b9380a #> ✔ skipped branch model_data_ffcdb73c #> ✔ skipped branch model_data_b968a03a #> ✔ skipped branch model_data_f8763cb2 #> ✔ skipped branch model_data_0bfdabdc #> ✔ skipped pattern model_data #> ✔ skipped branch model_model_5d061b58 #> ✔ skipped branch model_model_a9336683 #> ✔ skipped branch model_model_bde6a6d6 #> ✔ skipped branch model_model_384f982f #> ✔ skipped branch model_model_0d59666a #> ✔ skipped pattern model_model #> ✔ skipped target model #> ▶ dispatched target coverage #> ● completed target coverage [0.011 seconds] #> ▶ ended pipeline [0.221 seconds] #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_read(coverage) #> # A tibble: 2 × 2 #>   variable coverage #>   <chr>       <dbl> #> 1 beta[1]         1 #> 2 beta[2]         1"},{"path":"https://docs.ropensci.org/stantargets/articles/simulation.html","id":"multiple-models","dir":"Articles","previous_headings":"","what":"Multiple models","title":"Bayesian simulation pipelines with stantargets","text":"tar_stan_rep_mcmc_summary() similar functions allow supply multiple Stan models. , model share collection datasets, .dataset_id column model target output allows custom analyses compare different models . Suppose new model, model2.stan. set simulation workflow run models, add model2.stan stan_files argument tar_stan_rep_mcmc_summary(). coverage summary , group .name compute coverage statistic model. graph , notice targets model_model model_model2 connected model_data upstream. Downstream, model equivalent dplyr::bind_rows(model_model, model_model2), special columns .name .file distinguish among models.","code":"lines <- \"data {   int <lower = 1> n;   vector[n] x;   vector[n] y; } parameters {   vector[2] beta; } model {   y ~ normal(beta[1] + x * x * beta[2], 1); // Regress on x^2 instead of x.   beta ~ normal(0, 1); }\" writeLines(lines, \"model2.stan\") # _targets.R library(targets) library(stantargets)  simulate_data <- function(n = 10L) {   beta <- rnorm(n = 2, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- rnorm(n, beta[1] + x * beta[2], 1)   list(     n = n,     x = x,     y = y,     .join_data = list(beta = beta)   ) }  list(   tar_stan_mcmc_rep_summary(     model,     c(\"model.stan\", \"model2.stan\"), # another model     simulate_data(),     batches = 5,     reps = 2,     variables = \"beta\",     summaries = list(       ~posterior::quantile2(.x, probs = c(0.025, 0.975))     ),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ),   tar_target(     coverage,     model %>%       group_by(.name, variable) %>%       summarize(coverage = mean(q2.5 < .join_data & .join_data < q97.5))   ) ) tar_visnetwork() #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #>"},{"path":"https://docs.ropensci.org/stantargets/articles/simulation.html","id":"simulation-based-calibration","dir":"Articles","previous_headings":"","what":"Simulation-based calibration","title":"Bayesian simulation pipelines with stantargets","text":"section explores rigorous validation study adopts proper simulation-based calibration (SBC) method (Talts et al. 2020). use method, need function generates rank statistics simulated dataset data frame posterior draws. model implemented correctly, rank statistics uniformly distributed model parameter. function use calculate_ranks_draws_matrix() function SBC R package (Kim et al. 2022). demonstrate function, simulate dataset, make hypothetical set posterior draws, call get_ranks() get SBC rank statistics model parameter. put practice pipeline, supply symbol get_ranks transform argument tar_stan_mcmc_rep_draws(). way, instead full set draws, replication return output get_ranks() draws (plus helper columns). supplied, transform argument tar_stan_mcmc_rep_draws() must name function pipeline. function must accept arguments data draws, must return data frame. new function get_ranks() dependency one downstream targets, changes get_ranks() force results refresh next run pipeline. Let’s run pipeline compute set rank statistics simulated dataset. data frame rank statistics one row per simulation rep one column per model parameter. model implemented correctly, rank statistics model parameter uniformly distributed. practice, may need thousands simulation reps make judgment.","code":"get_ranks <- function(data, draws) {   draws <- select(draws, starts_with(names(data$.join_data)))   truth <- map_dbl(     names(draws),     ~eval(parse(text = .x), envir = data$.join_data)   )   out <- SBC::calculate_ranks_draws_matrix(truth, as_draws_matrix(draws))   as_tibble(as.list(out)) } simulate_data <- function(n = 10L) {   beta <- rnorm(n = 2, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- rnorm(n, beta[1] + x * beta[2], 1)   list(     n = n,     x = x,     y = y,     .join_data = list(beta = beta)   ) }  data <- simulate_data()  str(data) #> List of 4 #>  $ n         : int 10 #>  $ x         : num [1:10] -1 -0.778 -0.556 -0.333 -0.111 ... #>  $ y         : num [1:10] -3.007 0.793 -1.739 -2.91 -1.616 ... #>  $ .join_data:List of 1 #>   ..$ beta: num [1:2] -2.144 -0.301 draws <- tibble(`beta[1]` = rnorm(100), `beta[2]` = rnorm(100))  draws #> # A tibble: 100 × 2 #>    `beta[1]` `beta[2]` #>        <dbl>     <dbl> #>  1     1.57    -0.658  #>  2    -0.610    0.0874 #>  3     1.05     0.0142 #>  4     1.20    -0.257  #>  5    -2.25    -0.583  #>  6     0.241   -0.425  #>  7    -1.23     1.31   #>  8    -1.83     0.655  #>  9    -0.703   -0.461  #> 10     0.156   -0.331  #> # ℹ 90 more rows library(dplyr) library(posterior) library(purrr) get_ranks(data = data, draws = draws) #> # A tibble: 1 × 2 #>   `beta[1]` `beta[2]` #>       <dbl>     <dbl> #> 1         1        45 # _targets.R library(targets) library(stantargets)  tar_option_set(packages = c(\"dplyr\", \"posterior\", \"purrr\", \"tibble\"))  simulate_data <- function(n = 10L) {   beta <- rnorm(n = 2, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- rnorm(n, beta[1] + x * beta[2], 1)   list(     n = n,     x = x,     y = y,     .join_data = list(beta = beta)   ) }  get_ranks <- function(data, draws) {   draws <- select(draws, starts_with(names(data$.join_data)))   truth <- map_dbl(     names(draws),     ~eval(parse(text = .x), envir = data$.join_data)   )   out <- SBC::calculate_ranks_draws_matrix(truth, as_draws_matrix(draws))   as_tibble(as.list(out)) }  list(   tar_stan_mcmc_rep_draws(     model,     c(\"model.stan\"),     simulate_data(),     batches = 5,     reps = 2,     variables = \"beta\",     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile(),     transform = get_ranks # Supply the transform to get SBC ranks.   ) ) tar_visnetwork() #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_make() #> ✔ skipped target model_batch #> ✔ skipped target model_file_model #> ✔ skipped branch model_data_b0b9380a #> ✔ skipped branch model_data_ffcdb73c #> ✔ skipped branch model_data_b968a03a #> ✔ skipped branch model_data_f8763cb2 #> ✔ skipped branch model_data_0bfdabdc #> ✔ skipped pattern model_data #> ▶ dispatched branch model_model_5d061b58 #> ● completed branch model_model_5d061b58 [1.644 seconds] #> ▶ dispatched branch model_model_a9336683 #> ● completed branch model_model_a9336683 [1.334 seconds] #> ▶ dispatched branch model_model_bde6a6d6 #> ● completed branch model_model_bde6a6d6 [1.33 seconds] #> ▶ dispatched branch model_model_384f982f #> ● completed branch model_model_384f982f [1.333 seconds] #> ▶ dispatched branch model_model_0d59666a #> ● completed branch model_model_0d59666a [1.343 seconds] #> ● completed pattern model_model #> ▶ ended pipeline [7.677 seconds] #> Warning message: #> package ‘targets’ was built under R version 4.3.3  #> tar_load(model_model)  model_model #> # A tibble: 10 × 7 #>    `beta[1]` `beta[2]` .rep     .dataset_id                .seed .file     .name #>        <dbl>     <dbl> <chr>    <chr>                      <int> <chr>     <chr> #>  1      2600       658 7c991244 model_data_b0b9380a_1 1490816252 model.st… model #>  2      2616      2049 e4141b79 model_data_b0b9380a_2 2036930449 model.st… model #>  3      3098       298 b4f14839 model_data_ffcdb73c_1  483483223 model.st… model #>  4      1646      3284 2c7051cc model_data_ffcdb73c_2  664499179 model.st… model #>  5      1122      3083 4d2b0770 model_data_b968a03a_1 1333721666 model.st… model #>  6       802      2402 d3199d78 model_data_b968a03a_2  894289376 model.st… model #>  7      3031       442 5768e060 model_data_f8763cb2_1   37052332 model.st… model #>  8      2831      3572 5589c874 model_data_f8763cb2_2 1333838785 model.st… model #>  9      3647      3022 a8ccdc62 model_data_0bfdabdc_1  573008143 model.st… model #> 10      3543      1781 f697a5d6 model_data_0bfdabdc_2 1825978703 model.st… model library(ggplot2) library(tidyr) model_model %>%   pivot_longer(     starts_with(\"beta\"),     names_to = \"parameter\",     values_to = \"ranks\"   ) %>%   ggplot(.) +   geom_histogram(aes(x = ranks), bins = 10) +   facet_wrap(~parameter) +   theme_gray(12)"},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Krzysztof Sakrejda. Reviewer. Matthew T. Warkentin. Reviewer. Eli Lilly Company. Copyright holder.","code":""},{"path":"https://docs.ropensci.org/stantargets/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Landau, W. M., (2021). stantargets R package: workflow framework efficient reproducible Stan-powered Bayesian data analysis pipelines. Journal Open Source Software, 6(60), 3193, https://doi.org/10.21105/joss.03193","code":"@Article{,   title = {The stantargets {R} package: a workflow framework for efficient reproducible {S}tan-powered {B}ayesian data analysis pipelines},   author = {William Michael Landau},   journal = {Journal of Open Source Software},   year = {2021},   volume = {6},   number = {60},   pages = {3193},   url = {https://doi.org/10.21105/joss.03193}, }"},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"stantargets-","dir":"","previous_headings":"","what":"Targets for Stan Workflows","title":"Targets for Stan Workflows","text":"Bayesian data analysis usually incurs long runtimes cumbersome custom code, process prototyping deploying custom Stan models can become daunting software engineering challenge. ease burden, stantargets R package creates Stan pipelines concise, efficient, scalable, tailored needs Bayesian statisticians. Leveraging targets, stantargets pipelines automatically parallelize computation skip expensive steps results already date. Minimal custom user-side code required, need manually configure branching, stantargets easier use targets CmdStanR directly. stantargets can access cmdstanr’s major algorithms (MCMC, variational Bayes, optimization) supports single-fit workflows multi-rep simulation studies.","code":""},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Targets for Stan Workflows","text":"prerequisites targets R package. Basic familiarity targets: watch minutes 7 40 video, read chapter user manual. Familiarity Bayesian Statistics Stan. Prior knowledge cmdstanr helps.","code":""},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"how-to-get-started","dir":"","previous_headings":"","what":"How to get started","title":"Targets for Stan Workflows","text":"Read stantargets introduction simulation vignettes, use https://docs.ropensci.org/stantargets/ reference constructing workflows. Visit https://github.com/wlandau/stantargets-example-validation example project based simulation vignette. example RStudio Cloud workspace allows run project web browser.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Targets for Stan Workflows","text":"Install GitHub development version access latest features patches. CmdStan command line interface also required. problems installing CmdStan, please consult installation guide cmdstanr installation guide CmdStan. Alternatively, Stan discourse friendly place ask Stan experts help.","code":"remotes::install_github(\"ropensci/stantargets\") cmdstanr::install_cmdstan()"},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Targets for Stan Workflows","text":"First, write _targets.R file loads packages, defines function generate Stan data, lists pipeline targets. target list can call target factories like tar_stan_mcmc() well ordinary targets tar_target(). following minimal example simple enough contain entirely within _targets.R file, larger projects, may wish store functions separate files targets-stan example. Run tar_visnetwork() check _targets.R correctness, call tar_make() run pipeline. Access results using tar_read(), e.g. tar_read(example_summary_x). Visit introductory vignette read example.","code":"# _targets.R library(targets) library(stantargets)  generate_data <- function() {   true_beta <- stats::rnorm(n = 1, mean = 0, sd = 1)   x <- seq(from = -1, to = 1, length.out = n)   y <- stats::rnorm(n, x * true_beta, 1)   list(n = n, x = x, y = y, true_beta = true_beta) }  list(   tar_stan_mcmc(     name = example,     stan_files = \"x.stan\",     data = generate_data()   ) )"},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"how-it-works-behind-the-scenes","dir":"","previous_headings":"","what":"How it works behind the scenes","title":"Targets for Stan Workflows","text":"stantargets supports specialized target factories create ensembles target objects cmdstanr workflows. target factories abstract away details targets cmdstanr make packages easier use. details, please read introductory vignette.","code":""},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Targets for Stan Workflows","text":"Please first read help guide learn best ask help. trouble using stantargets, can ask help GitHub discussions forum. purpose stantargets combine targets cmdstanr, issue may something one latter two packages, dependency targets, Stan . troubleshoot, peel back many layers possible isolate problem. example, issue comes cmdstanr, create reproducible example directly invokes cmdstanr without invoking stantargets. GitHub discussion issue forums packages, well Stan discourse, great resources.","code":""},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"participation","dir":"","previous_headings":"","what":"Participation","title":"Targets for Stan Workflows","text":"Development community effort, welcome discussion contribution. Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/stantargets/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Targets for Stan Workflows","text":"","code":"citation(\"stantargets\") #>  #> To cite stantargets in publications use: #>  #>   Landau, W. M., (2021). The stantargets R package: a workflow #>   framework for efficient reproducible Stan-powered Bayesian data #>   analysis pipelines. Journal of Open Source Software, 6(60), 3193, #>   https://doi.org/10.21105/joss.03193 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {The stantargets {R} package: a workflow framework for efficient reproducible {S}tan-powered {B}ayesian data analysis pipelines}, #>     author = {William Michael Landau}, #>     journal = {Journal of Open Source Software}, #>     year = {2021}, #>     volume = {6}, #>     number = {60}, #>     pages = {3193}, #>     url = {https://doi.org/10.21105/joss.03193}, #>   }"},{"path":"https://docs.ropensci.org/stantargets/reference/stantargets-package.html","id":null,"dir":"Reference","previous_headings":"","what":"targets: Targets Archetypes for Stan — stantargets-package","title":"targets: Targets Archetypes for Stan — stantargets-package","text":"Bayesian data analysis usually incurs long runtimes cumbersome custom code. pipeline toolkit tailored Bayesian statisticians, stantargets R package leverages targets cmdstanr ease burdens. stantargets makes super easy set scalable Stan pipelines automatically parallelize computation skip expensive steps results already date. Minimal custom code required, need manually configure branching, usage much easier targets alone. stantargets can access cmdstanr's major algorithms (MCMC, variational Bayes, optimization) supports single-fit workflows multi-rep simulation studies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Stan model compilation — tar_stan_compile","title":"Local Stan model compilation — tar_stan_compile","text":"tar_stan_compile() creates target compile Stan model local file system return original Stan model file. compile model compilation already date.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Stan model compilation — tar_stan_compile","text":"","code":"tar_stan_compile(   name,   stan_file,   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Stan model compilation — tar_stan_compile","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Stan model compilation — tar_stan_compile","text":"tar_stan_compile() returns target object compile Stan file. return value target character vector containing Stan model source file compiled executable file. change either file cause target rerun next run pipeline. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local Stan model compilation — tar_stan_compile","text":"arguments passed $compile() method CmdStanModel class. details, visit https://mc-stan.org/cmdstanr/reference/.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Local Stan model compilation — tar_stan_compile","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Stan model compilation — tar_stan_compile","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(tar_stan_compile(compiled_model, path)) }) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a Stan model and return the model file. — tar_stan_compile_run","title":"Compile a Stan model and return the model file. — tar_stan_compile_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a Stan model and return the model file. — tar_stan_compile_run","text":"","code":"tar_stan_compile_run(   stan_file,   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a Stan model and return the model file. — tar_stan_compile_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_compile_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a Stan model and return the model file. — tar_stan_compile_run","text":"Character length 1, value stan_file.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","title":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","text":"example dataset compatible model file tar_stan_example_file().","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","text":"","code":"tar_stan_example_data(n = 10L)"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","text":"list following elements: n: integer, number data points. x: numeric, covariate vector. y: numeric, response variable. true_beta: numeric length 1, value regression coefficient beta used simulation. .join_data: list simulated values appended .join_data column output targets generated functions tar_stan_mcmc_rep_summary(). Contains regression coefficient beta (numeric length 1) prior predictive data y (numeric vector).","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","text":"n Integer length 1, number data points.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","text":"List, dataset compatible model file tar_stan_example_file().","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","text":"tar_stan_example_data() function draws Stan dataset prior predictive distribution model tar_stan_example_file(). First, regression coefficient beta drawn standard normal prior, covariate x computed. , conditional beta draws covariate, response vector y drawn Normal(x * beta, 1) likelihood.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate example data for tar_stan_example_file(). — tar_stan_example_data","text":"","code":"tar_stan_example_data() #> $n #> [1] 10 #>  #> $x #>  [1] -1.0000000 -0.7777778 -0.5555556 -0.3333333 -0.1111111  0.1111111 #>  [7]  0.3333333  0.5555556  0.7777778  1.0000000 #>  #> $y #>  [1]  1.6553606 -1.3483409  0.7722307  1.0882339  1.3039720 -1.9773781 #>  [7] -0.7140065 -1.0220016 -1.3716282 -1.9537429 #>  #> $true_beta #> [1] -1.400044 #>  #> $.join_data #> $.join_data$beta #> [1] -1.400044 #>  #> $.join_data$y_rep #>  [1]  1.6553606 -1.3483409  0.7722307  1.0882339  1.3039720 -1.9773781 #>  [7] -0.7140065 -1.0220016 -1.3716282 -1.9537429 #>  #>"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an example Stan model file. — tar_stan_example_file","title":"Write an example Stan model file. — tar_stan_example_file","text":"Overwrites file path built-example Stan model file.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an example Stan model file. — tar_stan_example_file","text":"","code":"tar_stan_example_file(path = tempfile(pattern = \"\", fileext = \".stan\"))"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an example Stan model file. — tar_stan_example_file","text":"path Character length 1, file path write model file.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an example Stan model file. — tar_stan_example_file","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_example_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an example Stan model file. — tar_stan_example_file","text":"","code":"path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) writeLines(readLines(path)) #> data { #>   int <lower = 1> n; #>   vector[n] x; #>   vector[n] y; #> } #> parameters { #>   real beta; #> } #> model { #>   y ~ normal(x * beta, 1); #>   beta ~ normal(0, 1); #> } #> generated quantities { #>   array[n] real y_rep = normal_rng(x * beta, 1); #> }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","title":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","text":"tar_stan_gq() creates targets run generated quantities Stan model save draws summaries separately.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","text":"","code":"tar_stan_gq(   name,   stan_files,   data = list(),   fitted_params,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   output_dir = NULL,   sig_figs = NULL,   parallel_chains = getOption(\"mc.cores\", 1),   threads_per_chain = NULL,   variables = NULL,   variables_fit = NULL,   summaries = list(),   summary_args = list(),   return_draws = TRUE,   return_summary = TRUE,   draws = NULL,   summary = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector Stan model files. supply multiple files, model run one shared dataset generated code data. supply unnamed vector, fs::path_ext_remove(basename(stan_files)) used target name suffixes. stan_files named vector, suffixed come names(stan_files). data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. fitted_params Symbol, name CmdStanFit object computed previous target: example, *_mcmc_* target tar_stan_mcmc(). Must subclass $generate_quantities() can accept fitted_params. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. variables (character vector) variables include. variables_fit Character vector variables include big CmdStanFit object returned model fit target. variables argument, contrast, \"draws\" target . \"draws\" target can access variables CmdStanFit target. Control variables variables variables_fit arguments. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. return_draws Logical, whether create target posterior draws. Saves posterior::as_draws_df(fit$draws()) compressed tibble. Convenient, duplicates storage. return_summary Logical, whether create target fit$summary(). draws Deprecated 2022-07-22. Use return_draws instead. summary Deprecated 2022-07-22. Use return_summary instead. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","text":"tar_stan_gq() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_gq(name = x, stan_files = \"y.stan\", ...) follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: run R expression data argument produce Stan dataset model. Returns Stan data list. x_gq_y: run generated quantities model dataset. Returns cmdstanr CmdStanGQ object results. x_draws_y: extract draws x_gq_y. Omitted draws = FALSE. Returns tidy data frame draws. x_summary_y: extract compact summaries x_gq_y. Returns tidy data frame summaries. Omitted summary = FALSE.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","text":"arguments passed $compile(), $generate_quantities(), $summary() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generated quantities on an existing CmdStanFit object — tar_stan_gq","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mcmc(     your_model,     stan_files = c(x = path),     data = tar_stan_example_data(),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ),   tar_stan_gq(     custom_gq,     stan_files = path, # Can be a different model.     fitted_params = your_model_mcmc_x,     data = your_model_data, # Can be a different dataset.     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple runs of generated quantities per model with\ntidy output — tar_stan_gq_rep","title":"Multiple runs of generated quantities per model with\ntidy output — tar_stan_gq_rep","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple runs of generated quantities per model with\ntidy output — tar_stan_gq_rep","text":"","code":"tar_stan_gq_rep(   name,   stan_files,   data = quote(list()),   fitted_params,   output_type = c(\"summary\", \"draws\"),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   output_dir = NULL,   sig_figs = NULL,   parallel_chains = getOption(\"mc.cores\", 1),   threads_per_chain = NULL,   data_copy = character(0),   variables = NULL,   summaries = NULL,   summary_args = NULL,   transform = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple runs of generated quantities per model with\ntidy output — tar_stan_gq_rep","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. fitted_params (multiple options) parameter draws use. One following: CmdStanMCMC CmdStanVB fitted model object. posterior::draws_array (MCMC) posterior::draws_matrix (VB) object returned CmdStanR's $draws() method. character vector paths CmdStan CSV output files. NOTE: plan making many calls $generate_quantities() efficient option pass paths CmdStan CSV output files (avoids CmdStanR rewrite draws contained fitted model object CSV time). longer CSV files can use draws_to_csv() write pass resulting file paths $generate_quantities() many times needed. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple runs of generated quantities per model with\ntidy output — tar_stan_gq_rep","text":"list target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Developers can consult design specification https://books.ropensci.org/targets-design/ learn structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple runs of generated quantities per model with\ntidy output — tar_stan_gq_rep","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"tar_stan_gq_rep_draws() creates targets run generated quantities multiple times save draws run.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"","code":"tar_stan_gq_rep_draws(   name,   stan_files,   data = list(),   fitted_params,   batches = 1L,   reps = 1L,   combine = FALSE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   output_dir = NULL,   sig_figs = NULL,   parallel_chains = getOption(\"mc.cores\", 1),   threads_per_chain = NULL,   variables = NULL,   data_copy = character(0),   transform = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = \"transient\",   garbage_collection = TRUE,   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. fitted_params (multiple options) parameter draws use. One following: CmdStanMCMC CmdStanVB fitted model object. posterior::draws_array (MCMC) posterior::draws_matrix (VB) object returned CmdStanR's $draws() method. character vector paths CmdStan CSV output files. NOTE: plan making many calls $generate_quantities() efficient option pass paths CmdStan CSV output files (avoids CmdStanR rewrite draws contained fitted model object CSV time). longer CSV files can use draws_to_csv() write pass resulting file paths $generate_quantities() many times needed. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"tar_stan_gq_rep_draws() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_gq_rep_draws(name = x, stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run generated quantities per dataset. dynamic branch returns tidy data frames draws corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame draws.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"arguments passed $compile() $sample() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple runs of generated quantities per model with draws — tar_stan_gq_rep_draws","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mcmc(     your_model,     stan_files = c(x = path),     data = tar_stan_example_data(),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile(),     refresh = 0   ),   tar_stan_gq_rep_draws(     generated_quantities,     stan_files = path,     data = tar_stan_example_data(),     fitted_params = your_model_mcmc_x,     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Stan model and return only the summaries. — tar_stan_gq_rep_run","title":"Run a Stan model and return only the summaries. — tar_stan_gq_rep_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Stan model and return only the summaries. — tar_stan_gq_rep_run","text":"","code":"tar_stan_gq_rep_run(   stan_file,   stan_name,   stan_path,   data,   output_type,   fitted_params,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   output_dir,   sig_figs,   parallel_chains,   threads_per_chain,   data_copy,   variables,   summaries,   summary_args,   transform )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Stan model and return only the summaries. — tar_stan_gq_rep_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. stan_name Friendly suffix Stan model target. stan_path Original path input Stan file. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". fitted_params (multiple options) parameter draws use. One following: CmdStanMCMC CmdStanVB fitted model object. posterior::draws_array (MCMC) posterior::draws_matrix (VB) object returned CmdStanR's $draws() method. character vector paths CmdStan CSV output files. NOTE: plan making many calls $generate_quantities() efficient option pass paths CmdStan CSV output files (avoids CmdStanR rewrite draws contained fitted model object CSV time). longer CSV files can use draws_to_csv() write pass resulting file paths $generate_quantities() many times needed. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Stan model and return only the summaries. — tar_stan_gq_rep_run","text":"data frame posterior summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"tar_stan_gq_rep_summaries() creates targets run generated quantities multiple times save summaries run.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"","code":"tar_stan_gq_rep_summary(   name,   stan_files,   data = list(),   fitted_params,   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   output_dir = NULL,   sig_figs = NULL,   parallel_chains = getOption(\"mc.cores\", 1),   threads_per_chain = NULL,   data_copy = character(0),   variables = NULL,   summaries = list(),   summary_args = list(),   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. fitted_params (multiple options) parameter draws use. One following: CmdStanMCMC CmdStanVB fitted model object. posterior::draws_array (MCMC) posterior::draws_matrix (VB) object returned CmdStanR's $draws() method. character vector paths CmdStan CSV output files. NOTE: plan making many calls $generate_quantities() efficient option pass paths CmdStan CSV output files (avoids CmdStanR rewrite draws contained fitted model object CSV time). longer CSV files can use draws_to_csv() write pass resulting file paths $generate_quantities() many times needed. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"tar_stan_gq_rep_summaries() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_gq_rep_summary(name = x, stan_files = \"y.stan\") returns list target objects: x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run generated quantities per dataset. dynamic branch returns tidy data frames summaries corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"arguments passed $compile() $generate_quantities() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_rep_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple runs of generated quantities per model with summaries — tar_stan_gq_rep_summary","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mcmc(     your_model,     stan_files = c(x = path),     data = tar_stan_example_data(),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ),   tar_stan_gq_rep_summary(     generated_quantities,     stan_files = path,     data = tar_stan_example_data(),     fitted_params = your_model_mcmc_x,     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_gq_run","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_gq_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_gq_run","text":"","code":"tar_stan_gq_run(   stan_file,   data,   fitted_params,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   output_dir,   sig_figs,   parallel_chains,   threads_per_chain,   variables )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_gq_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. fitted_params (multiple options) parameter draws use. One following: CmdStanMCMC CmdStanVB fitted model object. posterior::draws_array (MCMC) posterior::draws_matrix (VB) object returned CmdStanR's $draws() method. character vector paths CmdStan CSV output files. NOTE: plan making many calls $generate_quantities() efficient option pass paths CmdStan CSV output files (avoids CmdStanR rewrite draws contained fitted model object CSV time). longer CSV files can use draws_to_csv() write pass resulting file paths $generate_quantities() many times needed. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_gq_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_gq_run","text":"CmdStanFit object.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"One MCMC per model with multiple outputs — tar_stan_mcmc","title":"One MCMC per model with multiple outputs — tar_stan_mcmc","text":"tar_stan_mcmc() creates targets run one MCMC per model separately save summaries draws, diagnostics.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One MCMC per model with multiple outputs — tar_stan_mcmc","text":"","code":"tar_stan_mcmc(   name,   stan_files,   data = list(),   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   chains = 4,   parallel_chains = getOption(\"mc.cores\", 1),   chain_ids = seq_len(chains),   threads_per_chain = NULL,   opencl_ids = NULL,   iter_warmup = NULL,   iter_sampling = NULL,   save_warmup = FALSE,   thin = NULL,   max_treedepth = NULL,   adapt_engaged = TRUE,   adapt_delta = NULL,   step_size = NULL,   metric = NULL,   metric_file = NULL,   inv_metric = NULL,   init_buffer = NULL,   term_buffer = NULL,   window = NULL,   fixed_param = FALSE,   show_messages = TRUE,   diagnostics = c(\"divergences\", \"treedepth\", \"ebfmi\"),   variables = NULL,   variables_fit = NULL,   inc_warmup = FALSE,   inc_warmup_fit = FALSE,   summaries = list(),   summary_args = list(),   return_draws = TRUE,   return_diagnostics = TRUE,   return_summary = TRUE,   draws = NULL,   summary = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One MCMC per model with multiple outputs — tar_stan_mcmc","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector Stan model files. supply multiple files, model run one shared dataset generated code data. supply unnamed vector, fs::path_ext_remove(basename(stan_files)) used target name suffixes. stan_files named vector, suffixed come names(stan_files). data Code generate data Stan model. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). output_basename (string) string use prefix names output CSV files CmdStan. NULL (default), basename output CSV files comprised model name, timestamp, 5 random characters. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. chain_ids (integer vector) vector chain IDs. Must contain many unique positive integers number chains. set, default chain IDs used (integers starting 1). threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. opencl_ids (integer vector length 2) platform device IDs OpenCL device use fitting. model must compiled cpp_options = list(stan_opencl = TRUE) argument effect. iter_warmup (positive integer) number warmup iterations run per chain. Note: CmdStan User's Guide referred num_warmup. iter_sampling (positive integer) number post-warmup iterations run per chain. Note: CmdStan User's Guide referred num_samples. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. max_treedepth (positive integer) maximum allowed tree depth NUTS engine. See Tree Depth section CmdStan User's Guide details. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_delta (real (0,1)) adaptation target acceptance statistic. step_size (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. tuned warmup. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. See Euclidean Metric section CmdStan User's Guide details. specify precomputed (inverse) metric, see inv_metric argument . metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. metric_file argument inherited CmdStan confusing entry JSON Rdump file(s) must named inv_metric, referring inverse metric. recommend instead using CmdStanR's inv_metric argument (see ) specify inverse metric directly using vector matrix R session. inv_metric (vector, matrix) vector (metric='diag_e') matrix (metric='dense_e') initializing inverse metric. can used alternative metric_file argument. vector interpreted diagonal metric. inverse metric usually set estimate posterior covariance. See adapt_engaged argument details (control ) specifying precomputed inverse metric interacts adaptation. init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. window (nonnegative integer) Initial width slow timestep/metric adaptation interval. fixed_param (logical) TRUE, call CmdStan argument \"algorithm=fixed_param\". default FALSE. fixed parameter sampler generates new sample without changing current state Markov chain; generated quantities may change. can useful , example, trying generate pseudo-data using generated quantities block. parameters block empty using fixed_param=TRUE mandatory. fixed_param=TRUE chains parallel_chains arguments set 1. show_messages (logical) TRUE (default), prints output sampling process, iteration numbers elapsed times. output silenced $output() method resulting fit object can used display silenced messages. diagnostics (character vector) diagnostics automatically check warn sampling. Setting empty string \"\" NULL can used prevent CmdStanR automatically reading sampler diagnostics CSV wish manually read results validate , example using read_cmdstan_csv(). currently available diagnostics \"divergences\", \"treedepth\", \"ebfmi\" (default check ). diagnostics also available fitting. $sampler_diagnostics() method provides access diagnostic values iteration $diagnostic_summary() method provides summaries diagnostics can regenerate warning messages. Diagnostics like R-hat effective sample size currently available via diagnostics argument can checked fitting using $summary() method. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. variables_fit Character vector variables include big CmdStanFit object returned model fit target. variables argument, contrast, \"draws\" target . \"draws\" target can access variables CmdStanFit target. Control variables variables variables_fit arguments. inc_warmup (logical) warmup draws included? Defaults FALSE. Ignored except used CmdStanMCMC objects. inc_warmup_fit Logical length 1, whether include warmup draws big MCMC object (target \"mcmc\" name). inc_warmup must TRUE inc_warmup_fit FALSE. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. return_draws Logical, whether create target posterior draws. Saves posterior::as_draws_df(fit$draws()) compressed tibble. Convenient, duplicates storage. return_diagnostics Logical, whether create target posterior::as_draws_df(fit$sampler_diagnostics()). Saves posterior::as_draws_df(fit$draws()) compressed tibble. Convenient, duplicates storage. return_summary Logical, whether create target fit$summary(). draws Deprecated 2022-07-22. Use return_draws instead. summary Deprecated 2022-07-22. Use return_summary instead. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format non-data-frame targets Stan data CmdStanFit objects. Please choose =purpose format \"qs\" \"aws_qs\" rather file format like \"file\" data frame format like \"parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One MCMC per model with multiple outputs — tar_stan_mcmc","text":"tar_stan_mcmc() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_mcmc(name = x, stan_files = \"y.stan\", ...) follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: run R expression data argument produce Stan dataset model. Returns Stan data list. x_mcmc_y: run MCMC model dataset. Returns cmdstanr CmdStanMCMC object results. x_draws_y: extract draws x_mcmc_y. Omitted draws = FALSE. Returns tidy data frame draws. x_summary_y: extract compact summaries x_mcmc_y. Returns tidy data frame summaries. Omitted summary = FALSE. x_diagnostics: extract HMC diagnostics x_mcmc_y. Returns tidy data frame HMC diagnostics. Omitted diagnostics = FALSE.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One MCMC per model with multiple outputs — tar_stan_mcmc","text":"arguments passed $compile(), $sample(), $summary() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"One MCMC per model with multiple outputs — tar_stan_mcmc","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One MCMC per model with multiple outputs — tar_stan_mcmc","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mcmc(     your_model,     stan_files = path,     data = tar_stan_example_data(),     variables = \"beta\",     summaries = list(~quantile(.x, probs = c(0.25, 0.75))),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple MCMCs per model with tidy output — tar_stan_mcmc_rep","title":"Multiple MCMCs per model with tidy output — tar_stan_mcmc_rep","text":"Internal function replicated MCMC. Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple MCMCs per model with tidy output — tar_stan_mcmc_rep","text":"","code":"tar_stan_mcmc_rep(   name,   stan_files,   data = list(),   output_type = c(\"summary\", \"draws\", \"diagnostics\"),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   chains = 4,   parallel_chains = getOption(\"mc.cores\", 1),   chain_ids = seq_len(chains),   threads_per_chain = NULL,   opencl_ids = NULL,   iter_warmup = NULL,   iter_sampling = NULL,   save_warmup = FALSE,   thin = NULL,   max_treedepth = NULL,   adapt_engaged = TRUE,   adapt_delta = NULL,   step_size = NULL,   metric = NULL,   metric_file = NULL,   inv_metric = NULL,   init_buffer = NULL,   term_buffer = NULL,   window = NULL,   fixed_param = FALSE,   show_messages = TRUE,   diagnostics = c(\"divergences\", \"treedepth\", \"ebfmi\"),   data_copy = character(0),   variables = NULL,   inc_warmup = FALSE,   summaries = NULL,   summary_args = NULL,   transform = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple MCMCs per model with tidy output — tar_stan_mcmc_rep","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data Code generate single replication simulated dataset. workflow simulates multiple datasets, model runs dataset. join data model summaries, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). output_basename (string) string use prefix names output CSV files CmdStan. NULL (default), basename output CSV files comprised model name, timestamp, 5 random characters. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. chain_ids (integer vector) vector chain IDs. Must contain many unique positive integers number chains. set, default chain IDs used (integers starting 1). threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. opencl_ids (integer vector length 2) platform device IDs OpenCL device use fitting. model must compiled cpp_options = list(stan_opencl = TRUE) argument effect. iter_warmup (positive integer) number warmup iterations run per chain. Note: CmdStan User's Guide referred num_warmup. iter_sampling (positive integer) number post-warmup iterations run per chain. Note: CmdStan User's Guide referred num_samples. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. max_treedepth (positive integer) maximum allowed tree depth NUTS engine. See Tree Depth section CmdStan User's Guide details. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_delta (real (0,1)) adaptation target acceptance statistic. step_size (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. tuned warmup. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. See Euclidean Metric section CmdStan User's Guide details. specify precomputed (inverse) metric, see inv_metric argument . metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. metric_file argument inherited CmdStan confusing entry JSON Rdump file(s) must named inv_metric, referring inverse metric. recommend instead using CmdStanR's inv_metric argument (see ) specify inverse metric directly using vector matrix R session. inv_metric (vector, matrix) vector (metric='diag_e') matrix (metric='dense_e') initializing inverse metric. can used alternative metric_file argument. vector interpreted diagonal metric. inverse metric usually set estimate posterior covariance. See adapt_engaged argument details (control ) specifying precomputed inverse metric interacts adaptation. init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. window (nonnegative integer) Initial width slow timestep/metric adaptation interval. fixed_param (logical) TRUE, call CmdStan argument \"algorithm=fixed_param\". default FALSE. fixed parameter sampler generates new sample without changing current state Markov chain; generated quantities may change. can useful , example, trying generate pseudo-data using generated quantities block. parameters block empty using fixed_param=TRUE mandatory. fixed_param=TRUE chains parallel_chains arguments set 1. show_messages (logical) TRUE (default), prints output sampling process, iteration numbers elapsed times. output silenced $output() method resulting fit object can used display silenced messages. diagnostics (character vector) diagnostics automatically check warn sampling. Setting empty string \"\" NULL can used prevent CmdStanR automatically reading sampler diagnostics CSV wish manually read results validate , example using read_cmdstan_csv(). currently available diagnostics \"divergences\", \"treedepth\", \"ebfmi\" (default check ). diagnostics also available fitting. $sampler_diagnostics() method provides access diagnostic values iteration $diagnostic_summary() method provides summaries diagnostics can regenerate warning messages. Diagnostics like R-hat effective sample size currently available via diagnostics argument can checked fitting using $summary() method. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. inc_warmup (logical) warmup draws included? Defaults FALSE. Ignored except used CmdStanMCMC objects. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple MCMCs per model with tidy output — tar_stan_mcmc_rep","text":"list target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Developers can consult design specification https://books.ropensci.org/targets-design/ learn structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple MCMCs per model with tidy output — tar_stan_mcmc_rep","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"tar_stan_mcmc_rep_diagnostics() creates targets run MCMC multiple times per model save sampler diagnostics run.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"","code":"tar_stan_mcmc_rep_diagnostics(   name,   stan_files,   data = list(),   batches = 1L,   reps = 1L,   combine = FALSE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   chains = 4,   parallel_chains = getOption(\"mc.cores\", 1),   chain_ids = seq_len(chains),   threads_per_chain = NULL,   opencl_ids = NULL,   iter_warmup = NULL,   iter_sampling = NULL,   save_warmup = FALSE,   thin = NULL,   max_treedepth = NULL,   adapt_engaged = TRUE,   adapt_delta = NULL,   step_size = NULL,   metric = NULL,   metric_file = NULL,   inv_metric = NULL,   init_buffer = NULL,   term_buffer = NULL,   window = NULL,   fixed_param = FALSE,   show_messages = TRUE,   diagnostics = c(\"divergences\", \"treedepth\", \"ebfmi\"),   inc_warmup = FALSE,   data_copy = character(0),   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = \"transient\",   garbage_collection = TRUE,   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data Code generate single replication simulated dataset. workflow simulates multiple datasets, model runs dataset. join data model summaries, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). output_basename (string) string use prefix names output CSV files CmdStan. NULL (default), basename output CSV files comprised model name, timestamp, 5 random characters. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. chain_ids (integer vector) vector chain IDs. Must contain many unique positive integers number chains. set, default chain IDs used (integers starting 1). threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. opencl_ids (integer vector length 2) platform device IDs OpenCL device use fitting. model must compiled cpp_options = list(stan_opencl = TRUE) argument effect. iter_warmup (positive integer) number warmup iterations run per chain. Note: CmdStan User's Guide referred num_warmup. iter_sampling (positive integer) number post-warmup iterations run per chain. Note: CmdStan User's Guide referred num_samples. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. max_treedepth (positive integer) maximum allowed tree depth NUTS engine. See Tree Depth section CmdStan User's Guide details. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_delta (real (0,1)) adaptation target acceptance statistic. step_size (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. tuned warmup. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. See Euclidean Metric section CmdStan User's Guide details. specify precomputed (inverse) metric, see inv_metric argument . metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. metric_file argument inherited CmdStan confusing entry JSON Rdump file(s) must named inv_metric, referring inverse metric. recommend instead using CmdStanR's inv_metric argument (see ) specify inverse metric directly using vector matrix R session. inv_metric (vector, matrix) vector (metric='diag_e') matrix (metric='dense_e') initializing inverse metric. can used alternative metric_file argument. vector interpreted diagonal metric. inverse metric usually set estimate posterior covariance. See adapt_engaged argument details (control ) specifying precomputed inverse metric interacts adaptation. init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. window (nonnegative integer) Initial width slow timestep/metric adaptation interval. fixed_param (logical) TRUE, call CmdStan argument \"algorithm=fixed_param\". default FALSE. fixed parameter sampler generates new sample without changing current state Markov chain; generated quantities may change. can useful , example, trying generate pseudo-data using generated quantities block. parameters block empty using fixed_param=TRUE mandatory. fixed_param=TRUE chains parallel_chains arguments set 1. show_messages (logical) TRUE (default), prints output sampling process, iteration numbers elapsed times. output silenced $output() method resulting fit object can used display silenced messages. diagnostics (character vector) diagnostics automatically check warn sampling. Setting empty string \"\" NULL can used prevent CmdStanR automatically reading sampler diagnostics CSV wish manually read results validate , example using read_cmdstan_csv(). currently available diagnostics \"divergences\", \"treedepth\", \"ebfmi\" (default check ). diagnostics also available fitting. $sampler_diagnostics() method provides access diagnostic values iteration $diagnostic_summary() method provides summaries diagnostics can regenerate warning messages. Diagnostics like R-hat effective sample size currently available via diagnostics argument can checked fitting using $summary() method. inc_warmup (logical) warmup draws included? Defaults FALSE. Ignored except used CmdStanMCMC objects. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"tar_stan_mcmc_rep_diagnostics() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_mcmc_rep_diagnostics(name = x, stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run MCMC per dataset. dynamic branch returns tidy data frames HMC diagnostics corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame HMC diagnostics.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"Saved diagnostics get quite large storage, please use thinning necessary. arguments passed $compile() $generate_quantities() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple MCMCs per model with sampler diagnostics — tar_stan_mcmc_rep_diagnostics","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mcmc_rep_diagnostics(     your_model,     stan_files = path,     data = tar_stan_example_data(),     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"tar_stan_mcmc_rep_draws() creates targets run MCMC multiple times per model save draws run.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"","code":"tar_stan_mcmc_rep_draws(   name,   stan_files,   data = list(),   batches = 1L,   reps = 1L,   combine = FALSE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   chains = 4,   parallel_chains = getOption(\"mc.cores\", 1),   chain_ids = seq_len(chains),   threads_per_chain = NULL,   opencl_ids = NULL,   iter_warmup = NULL,   iter_sampling = NULL,   save_warmup = FALSE,   thin = NULL,   max_treedepth = NULL,   adapt_engaged = TRUE,   adapt_delta = NULL,   step_size = NULL,   metric = NULL,   metric_file = NULL,   inv_metric = NULL,   init_buffer = NULL,   term_buffer = NULL,   window = NULL,   fixed_param = FALSE,   show_messages = TRUE,   diagnostics = c(\"divergences\", \"treedepth\", \"ebfmi\"),   inc_warmup = FALSE,   variables = NULL,   data_copy = character(0),   transform = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = \"transient\",   garbage_collection = TRUE,   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data Code generate single replication simulated dataset. workflow simulates multiple datasets, model runs dataset. join data model summaries, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). output_basename (string) string use prefix names output CSV files CmdStan. NULL (default), basename output CSV files comprised model name, timestamp, 5 random characters. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. chain_ids (integer vector) vector chain IDs. Must contain many unique positive integers number chains. set, default chain IDs used (integers starting 1). threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. opencl_ids (integer vector length 2) platform device IDs OpenCL device use fitting. model must compiled cpp_options = list(stan_opencl = TRUE) argument effect. iter_warmup (positive integer) number warmup iterations run per chain. Note: CmdStan User's Guide referred num_warmup. iter_sampling (positive integer) number post-warmup iterations run per chain. Note: CmdStan User's Guide referred num_samples. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. max_treedepth (positive integer) maximum allowed tree depth NUTS engine. See Tree Depth section CmdStan User's Guide details. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_delta (real (0,1)) adaptation target acceptance statistic. step_size (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. tuned warmup. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. See Euclidean Metric section CmdStan User's Guide details. specify precomputed (inverse) metric, see inv_metric argument . metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. metric_file argument inherited CmdStan confusing entry JSON Rdump file(s) must named inv_metric, referring inverse metric. recommend instead using CmdStanR's inv_metric argument (see ) specify inverse metric directly using vector matrix R session. inv_metric (vector, matrix) vector (metric='diag_e') matrix (metric='dense_e') initializing inverse metric. can used alternative metric_file argument. vector interpreted diagonal metric. inverse metric usually set estimate posterior covariance. See adapt_engaged argument details (control ) specifying precomputed inverse metric interacts adaptation. init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. window (nonnegative integer) Initial width slow timestep/metric adaptation interval. fixed_param (logical) TRUE, call CmdStan argument \"algorithm=fixed_param\". default FALSE. fixed parameter sampler generates new sample without changing current state Markov chain; generated quantities may change. can useful , example, trying generate pseudo-data using generated quantities block. parameters block empty using fixed_param=TRUE mandatory. fixed_param=TRUE chains parallel_chains arguments set 1. show_messages (logical) TRUE (default), prints output sampling process, iteration numbers elapsed times. output silenced $output() method resulting fit object can used display silenced messages. diagnostics (character vector) diagnostics automatically check warn sampling. Setting empty string \"\" NULL can used prevent CmdStanR automatically reading sampler diagnostics CSV wish manually read results validate , example using read_cmdstan_csv(). currently available diagnostics \"divergences\", \"treedepth\", \"ebfmi\" (default check ). diagnostics also available fitting. $sampler_diagnostics() method provides access diagnostic values iteration $diagnostic_summary() method provides summaries diagnostics can regenerate warning messages. Diagnostics like R-hat effective sample size currently available via diagnostics argument can checked fitting using $summary() method. inc_warmup (logical) warmup draws included? Defaults FALSE. Ignored except used CmdStanMCMC objects. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"tar_stan_mcmc_rep_draws() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_mcmc_rep_draws(name = x, stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run MCMC per dataset. dynamic branch returns tidy data frames draws corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame draws.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"Draws take lot storage. storage becomes excessive, please consider thinning draws using tar_stan_mcmc_rep_summary() instead. arguments passed $compile() $sample() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple MCMC runs per model with draws — tar_stan_mcmc_rep_draws","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mcmc_rep_draws(     your_model,     stan_files = path,     data = tar_stan_example_data(),     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Stan model and return only the summaries. — tar_stan_mcmc_rep_run","title":"Run a Stan model and return only the summaries. — tar_stan_mcmc_rep_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Stan model and return only the summaries. — tar_stan_mcmc_rep_run","text":"","code":"tar_stan_mcmc_rep_run(   stan_file,   stan_name,   stan_path,   data,   output_type,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   refresh,   init,   save_latent_dynamics,   output_dir,   output_basename,   sig_figs,   chains,   parallel_chains,   chain_ids,   threads_per_chain,   opencl_ids,   iter_warmup,   iter_sampling,   save_warmup,   thin,   max_treedepth,   adapt_engaged,   adapt_delta,   step_size,   metric,   metric_file,   inv_metric,   init_buffer,   term_buffer,   window,   fixed_param,   show_messages,   diagnostics,   data_copy,   inc_warmup,   variables,   summaries,   summary_args,   transform )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Stan model and return only the summaries. — tar_stan_mcmc_rep_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. stan_name Friendly suffix Stan model target. stan_path Original path input Stan file. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). output_basename (string) string use prefix names output CSV files CmdStan. NULL (default), basename output CSV files comprised model name, timestamp, 5 random characters. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. chain_ids (integer vector) vector chain IDs. Must contain many unique positive integers number chains. set, default chain IDs used (integers starting 1). threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. opencl_ids (integer vector length 2) platform device IDs OpenCL device use fitting. model must compiled cpp_options = list(stan_opencl = TRUE) argument effect. iter_warmup (positive integer) number warmup iterations run per chain. Note: CmdStan User's Guide referred num_warmup. iter_sampling (positive integer) number post-warmup iterations run per chain. Note: CmdStan User's Guide referred num_samples. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. max_treedepth (positive integer) maximum allowed tree depth NUTS engine. See Tree Depth section CmdStan User's Guide details. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_delta (real (0,1)) adaptation target acceptance statistic. step_size (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. tuned warmup. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. See Euclidean Metric section CmdStan User's Guide details. specify precomputed (inverse) metric, see inv_metric argument . metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. metric_file argument inherited CmdStan confusing entry JSON Rdump file(s) must named inv_metric, referring inverse metric. recommend instead using CmdStanR's inv_metric argument (see ) specify inverse metric directly using vector matrix R session. inv_metric (vector, matrix) vector (metric='diag_e') matrix (metric='dense_e') initializing inverse metric. can used alternative metric_file argument. vector interpreted diagonal metric. inverse metric usually set estimate posterior covariance. See adapt_engaged argument details (control ) specifying precomputed inverse metric interacts adaptation. init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. window (nonnegative integer) Initial width slow timestep/metric adaptation interval. fixed_param (logical) TRUE, call CmdStan argument \"algorithm=fixed_param\". default FALSE. fixed parameter sampler generates new sample without changing current state Markov chain; generated quantities may change. can useful , example, trying generate pseudo-data using generated quantities block. parameters block empty using fixed_param=TRUE mandatory. fixed_param=TRUE chains parallel_chains arguments set 1. show_messages (logical) TRUE (default), prints output sampling process, iteration numbers elapsed times. output silenced $output() method resulting fit object can used display silenced messages. diagnostics (character vector) diagnostics automatically check warn sampling. Setting empty string \"\" NULL can used prevent CmdStanR automatically reading sampler diagnostics CSV wish manually read results validate , example using read_cmdstan_csv(). currently available diagnostics \"divergences\", \"treedepth\", \"ebfmi\" (default check ). diagnostics also available fitting. $sampler_diagnostics() method provides access diagnostic values iteration $diagnostic_summary() method provides summaries diagnostics can regenerate warning messages. Diagnostics like R-hat effective sample size currently available via diagnostics argument can checked fitting using $summary() method. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. inc_warmup (logical) warmup draws included? Defaults FALSE. Ignored except used CmdStanMCMC objects. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Stan model and return only the summaries. — tar_stan_mcmc_rep_run","text":"data frame posterior summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"Targets run MCMC multiple times save summary output run.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"","code":"tar_stan_mcmc_rep_summary(   name,   stan_files,   data = list(),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   chains = 4,   parallel_chains = getOption(\"mc.cores\", 1),   chain_ids = seq_len(chains),   threads_per_chain = NULL,   opencl_ids = NULL,   iter_warmup = NULL,   iter_sampling = NULL,   save_warmup = FALSE,   thin = NULL,   max_treedepth = NULL,   adapt_engaged = TRUE,   adapt_delta = NULL,   step_size = NULL,   metric = NULL,   metric_file = NULL,   inv_metric = NULL,   init_buffer = NULL,   term_buffer = NULL,   window = NULL,   fixed_param = FALSE,   show_messages = TRUE,   diagnostics = c(\"divergences\", \"treedepth\", \"ebfmi\"),   data_copy = character(0),   variables = NULL,   summaries = NULL,   summary_args = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data Code generate single replication simulated dataset. workflow simulates multiple datasets, model runs dataset. join data model summaries, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). output_basename (string) string use prefix names output CSV files CmdStan. NULL (default), basename output CSV files comprised model name, timestamp, 5 random characters. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. chain_ids (integer vector) vector chain IDs. Must contain many unique positive integers number chains. set, default chain IDs used (integers starting 1). threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. opencl_ids (integer vector length 2) platform device IDs OpenCL device use fitting. model must compiled cpp_options = list(stan_opencl = TRUE) argument effect. iter_warmup (positive integer) number warmup iterations run per chain. Note: CmdStan User's Guide referred num_warmup. iter_sampling (positive integer) number post-warmup iterations run per chain. Note: CmdStan User's Guide referred num_samples. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. max_treedepth (positive integer) maximum allowed tree depth NUTS engine. See Tree Depth section CmdStan User's Guide details. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_delta (real (0,1)) adaptation target acceptance statistic. step_size (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. tuned warmup. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. See Euclidean Metric section CmdStan User's Guide details. specify precomputed (inverse) metric, see inv_metric argument . metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. metric_file argument inherited CmdStan confusing entry JSON Rdump file(s) must named inv_metric, referring inverse metric. recommend instead using CmdStanR's inv_metric argument (see ) specify inverse metric directly using vector matrix R session. inv_metric (vector, matrix) vector (metric='diag_e') matrix (metric='dense_e') initializing inverse metric. can used alternative metric_file argument. vector interpreted diagonal metric. inverse metric usually set estimate posterior covariance. See adapt_engaged argument details (control ) specifying precomputed inverse metric interacts adaptation. init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. window (nonnegative integer) Initial width slow timestep/metric adaptation interval. fixed_param (logical) TRUE, call CmdStan argument \"algorithm=fixed_param\". default FALSE. fixed parameter sampler generates new sample without changing current state Markov chain; generated quantities may change. can useful , example, trying generate pseudo-data using generated quantities block. parameters block empty using fixed_param=TRUE mandatory. fixed_param=TRUE chains parallel_chains arguments set 1. show_messages (logical) TRUE (default), prints output sampling process, iteration numbers elapsed times. output silenced $output() method resulting fit object can used display silenced messages. diagnostics (character vector) diagnostics automatically check warn sampling. Setting empty string \"\" NULL can used prevent CmdStanR automatically reading sampler diagnostics CSV wish manually read results validate , example using read_cmdstan_csv(). currently available diagnostics \"divergences\", \"treedepth\", \"ebfmi\" (default check ). diagnostics also available fitting. $sampler_diagnostics() method provides access diagnostic values iteration $diagnostic_summary() method provides summaries diagnostics can regenerate warning messages. Diagnostics like R-hat effective sample size currently available via diagnostics argument can checked fitting using $summary() method. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"tar_stan_mcmc_rep_summary() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_mcmc_rep_summary(name = x, stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run MCMC per dataset. dynamic branch returns tidy data frames summaries. corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"arguments passed $compile() $sample() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_rep_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple MCMCs per model with summaries — tar_stan_mcmc_rep_summary","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mcmc_rep_summary(     your_model,     stan_files = path,     data = tar_stan_example_data(),     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_mcmc_run","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_mcmc_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_mcmc_run","text":"","code":"tar_stan_mcmc_run(   stan_file,   data,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   refresh,   init,   save_latent_dynamics,   output_dir,   output_basename,   sig_figs,   chains,   parallel_chains,   chain_ids,   threads_per_chain,   opencl_ids,   iter_warmup,   iter_sampling,   save_warmup,   thin,   max_treedepth,   adapt_engaged,   adapt_delta,   step_size,   metric,   metric_file,   inv_metric,   init_buffer,   term_buffer,   window,   fixed_param,   show_messages,   diagnostics,   variables,   inc_warmup )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_mcmc_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. compile Character length 1. \"original\", cmdstan compile source file right running (skip compilation binary date). assumes worker access file. worker running remote computer access model file, set \"copy\" instead. compile = \"copy\" means pipeline read lines original Stan model file send worker. worker writes lines local copy compiles model , longer needs access original Stan model file local machine. However, result, Stan model re-compiles every time main target reruns. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). output_basename (string) string use prefix names output CSV files CmdStan. NULL (default), basename output CSV files comprised model name, timestamp, 5 random characters. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) maximum number MCMC chains run parallel. parallel_chains specified default look option \"mc.cores\", can set entire R session options(mc.cores=value). \"mc.cores\" option set default 1. chain_ids (integer vector) vector chain IDs. Must contain many unique positive integers number chains. set, default chain IDs used (integers starting 1). threads_per_chain (positive integer) model compiled threading support, number threads use parallelized sections within MCMC chain (e.g., using Stan functions reduce_sum() map_rect()). contrast parallel_chains, specifies number chains run parallel. actual number CPU cores used parallel_chains*threads_per_chain. example using threading see Stan case study Reduce Sum: Minimal Example. opencl_ids (integer vector length 2) platform device IDs OpenCL device use fitting. model must compiled cpp_options = list(stan_opencl = TRUE) argument effect. iter_warmup (positive integer) number warmup iterations run per chain. Note: CmdStan User's Guide referred num_warmup. iter_sampling (positive integer) number post-warmup iterations run per chain. Note: CmdStan User's Guide referred num_samples. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. max_treedepth (positive integer) maximum allowed tree depth NUTS engine. See Tree Depth section CmdStan User's Guide details. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_delta (real (0,1)) adaptation target acceptance statistic. step_size (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. tuned warmup. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. See Euclidean Metric section CmdStan User's Guide details. specify precomputed (inverse) metric, see inv_metric argument . metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. metric_file argument inherited CmdStan confusing entry JSON Rdump file(s) must named inv_metric, referring inverse metric. recommend instead using CmdStanR's inv_metric argument (see ) specify inverse metric directly using vector matrix R session. inv_metric (vector, matrix) vector (metric='diag_e') matrix (metric='dense_e') initializing inverse metric. can used alternative metric_file argument. vector interpreted diagonal metric. inverse metric usually set estimate posterior covariance. See adapt_engaged argument details (control ) specifying precomputed inverse metric interacts adaptation. init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. window (nonnegative integer) Initial width slow timestep/metric adaptation interval. fixed_param (logical) TRUE, call CmdStan argument \"algorithm=fixed_param\". default FALSE. fixed parameter sampler generates new sample without changing current state Markov chain; generated quantities may change. can useful , example, trying generate pseudo-data using generated quantities block. parameters block empty using fixed_param=TRUE mandatory. fixed_param=TRUE chains parallel_chains arguments set 1. show_messages (logical) TRUE (default), prints output sampling process, iteration numbers elapsed times. output silenced $output() method resulting fit object can used display silenced messages. diagnostics (character vector) diagnostics automatically check warn sampling. Setting empty string \"\" NULL can used prevent CmdStanR automatically reading sampler diagnostics CSV wish manually read results validate , example using read_cmdstan_csv(). currently available diagnostics \"divergences\", \"treedepth\", \"ebfmi\" (default check ). diagnostics also available fitting. $sampler_diagnostics() method provides access diagnostic values iteration $diagnostic_summary() method provides summaries diagnostics can regenerate warning messages. Diagnostics like R-hat effective sample size currently available via diagnostics argument can checked fitting using $summary() method.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mcmc_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile and run a Stan model and return the CmdStanFit object. — tar_stan_mcmc_run","text":"CmdStanFit object.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"One optimization run per model with multiple outputs — tar_stan_mle","title":"One optimization run per model with multiple outputs — tar_stan_mle","text":"tar_stan_mle() creates targets optimize Stan model per model separately save draws-like output summary-like output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One optimization run per model with multiple outputs — tar_stan_mle","text":"","code":"tar_stan_mle(   name,   stan_files,   data = list(),   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   init_alpha = NULL,   iter = NULL,   tol_obj = NULL,   tol_rel_obj = NULL,   tol_grad = NULL,   tol_rel_grad = NULL,   tol_param = NULL,   history_size = NULL,   sig_figs = NULL,   variables = NULL,   variables_fit = NULL,   summaries = list(),   summary_args = list(),   return_draws = TRUE,   return_summary = TRUE,   draws = NULL,   summary = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One optimization run per model with multiple outputs — tar_stan_mle","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector Stan model files. supply multiple files, model run one shared dataset generated code data. supply unnamed vector, fs::path_ext_remove(basename(stan_files)) used target name suffixes. stan_files named vector, suffixed come names(stan_files). data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) optimization algorithm. One \"lbfgs\", \"bfgs\", \"newton\". control parameters available \"lbfgs\" \"bfgs. default values details see CmdStan User's Guide. default values can also obtained running cmdstanr_example(method=\"optimize\")$metadata(). init_alpha (positive real) initial step size parameter. iter (positive integer) maximum number iterations. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. available L-BFGS. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. variables (character vector) variables include. variables_fit Character vector variables include big CmdStanFit object returned model fit target. variables argument, contrast, \"draws\" target . \"draws\" target can access variables CmdStanFit target. Control variables variables variables_fit arguments. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. return_draws Logical, whether create target posterior draws. Saves posterior::as_draws_df(fit$draws()) compressed tibble. Convenient, duplicates storage. return_summary Logical, whether create target fit$summary(). draws Deprecated 2022-07-22. Use return_draws instead. summary Deprecated 2022-07-22. Use return_summary instead. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One optimization run per model with multiple outputs — tar_stan_mle","text":"tar_stan_mle() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_mle(name = x, stan_files = \"y.stan\", ...) follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: run R expression data argument produce Stan dataset model. Returns Stan data list. x_mle_y: run generated quantities model dataset. Returns cmdstanr CmdStanGQ object results. x_draws_y: extract maximum likelihood estimates x_mle_y draws format. Omitted draws = FALSE. Returns wide data frame MLEs. x_summary_y: extract MLEs x_mle_y summary format. Returns long data frame MLEs. Omitted summary = FALSE.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One optimization run per model with multiple outputs — tar_stan_mle","text":"arguments passed $compile(), $optimize(), $summary() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"One optimization run per model with multiple outputs — tar_stan_mle","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One optimization run per model with multiple outputs — tar_stan_mle","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mle(     your_model,     stan_files = path,     data = tar_stan_example_data(),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple optimization runs per model with tidy output — tar_stan_mle_rep","title":"Multiple optimization runs per model with tidy output — tar_stan_mle_rep","text":"Internal function. Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple optimization runs per model with tidy output — tar_stan_mle_rep","text":"","code":"tar_stan_mle_rep(   name,   stan_files,   data = list(),   output_type = c(\"summary\", \"draws\"),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   init_alpha = NULL,   iter = NULL,   tol_obj = NULL,   tol_rel_obj = NULL,   tol_grad = NULL,   tol_rel_grad = NULL,   tol_param = NULL,   history_size = NULL,   sig_figs = NULL,   data_copy = character(0),   variables = NULL,   summaries = list(),   summary_args = list(),   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple optimization runs per model with tidy output — tar_stan_mle_rep","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) optimization algorithm. One \"lbfgs\", \"bfgs\", \"newton\". control parameters available \"lbfgs\" \"bfgs. default values details see CmdStan User's Guide. default values can also obtained running cmdstanr_example(method=\"optimize\")$metadata(). init_alpha (positive real) initial step size parameter. iter (positive integer) maximum number iterations. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. available L-BFGS. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple optimization runs per model with tidy output — tar_stan_mle_rep","text":"list target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Developers can consult design specification https://books.ropensci.org/targets-design/ learn structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple optimization runs per model with tidy output — tar_stan_mle_rep","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"tar_stan_mle_rep_draws() creates targets run maximum likelihood multiple times per model save MLEs wide-form draws-like data frame.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"","code":"tar_stan_mle_rep_draws(   name,   stan_files,   data = list(),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   init_alpha = NULL,   iter = NULL,   sig_figs = NULL,   tol_obj = NULL,   tol_rel_obj = NULL,   tol_grad = NULL,   tol_rel_grad = NULL,   tol_param = NULL,   history_size = NULL,   data_copy = character(0),   variables = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) optimization algorithm. One \"lbfgs\", \"bfgs\", \"newton\". control parameters available \"lbfgs\" \"bfgs. default values details see CmdStan User's Guide. default values can also obtained running cmdstanr_example(method=\"optimize\")$metadata(). init_alpha (positive real) initial step size parameter. iter (positive integer) maximum number iterations. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. available L-BFGS. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"tar_stan_mle_rep_draws() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_mcmc_rep_draws(name = x, stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run maximum likelihood per dataset. dynamic branch returns tidy data frames maximum likelihood estimates corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame maximum likelihood estimates.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"arguments passed $compile() $optimize() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple optimization runs per model with draws — tar_stan_mle_rep_draws","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mle_rep_draws(     your_model,     stan_files = path,     data = tar_stan_example_data(),     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Stan model and return only the summaries. — tar_stan_mle_rep_run","title":"Run a Stan model and return only the summaries. — tar_stan_mle_rep_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Stan model and return only the summaries. — tar_stan_mle_rep_run","text":"","code":"tar_stan_mle_rep_run(   stan_file,   stan_name,   stan_path,   data,   output_type,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   refresh,   init,   save_latent_dynamics,   output_dir,   algorithm,   init_alpha,   iter,   sig_figs,   tol_obj,   tol_rel_obj,   tol_grad,   tol_rel_grad,   tol_param,   history_size,   data_copy,   variables,   summaries,   summary_args )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Stan model and return only the summaries. — tar_stan_mle_rep_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) optimization algorithm. One \"lbfgs\", \"bfgs\", \"newton\". control parameters available \"lbfgs\" \"bfgs. default values details see CmdStan User's Guide. default values can also obtained running cmdstanr_example(method=\"optimize\")$metadata(). init_alpha (positive real) initial step size parameter. iter (positive integer) maximum number iterations. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. available L-BFGS. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Stan model and return only the summaries. — tar_stan_mle_rep_run","text":"data frame posterior summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"tar_stan_mle_rep_summaries() creates targets run maximum likelihood multiple times per model save MLEs long-form summary-like data frame.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"","code":"tar_stan_mle_rep_summary(   name,   stan_files,   data = list(),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   init_alpha = NULL,   iter = NULL,   tol_obj = NULL,   tol_rel_obj = NULL,   tol_grad = NULL,   tol_rel_grad = NULL,   tol_param = NULL,   history_size = NULL,   sig_figs = NULL,   data_copy = character(0),   variables = NULL,   summaries = list(),   summary_args = list(),   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) optimization algorithm. One \"lbfgs\", \"bfgs\", \"newton\". control parameters available \"lbfgs\" \"bfgs. default values details see CmdStan User's Guide. default values can also obtained running cmdstanr_example(method=\"optimize\")$metadata(). init_alpha (positive real) initial step size parameter. iter (positive integer) maximum number iterations. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. available L-BFGS. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"tar_stan_mle_rep_summaries() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. specific target objects returned tar_stan_mle_rep_summary(name = x, , stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run maximum likelihood per dataset. dynamic branch returns tidy data frames maximum likelihood estimates corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame maximum likelihood estimates.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"arguments passed $compile() $optimize() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_rep_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple optimization runs per model with summaries — tar_stan_mle_rep_summary","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_mle_rep_summary(     your_model,     stan_files = path,     data = tar_stan_example_data(),     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile and run a Stan model and return a CmdStanMLE object. — tar_stan_mle_run","title":"Compile and run a Stan model and return a CmdStanMLE object. — tar_stan_mle_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile and run a Stan model and return a CmdStanMLE object. — tar_stan_mle_run","text":"","code":"tar_stan_mle_run(   stan_file,   data,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   refresh,   init,   save_latent_dynamics,   output_dir,   algorithm,   init_alpha,   iter,   sig_figs,   tol_obj,   tol_rel_obj,   tol_grad,   tol_rel_grad,   tol_param,   history_size,   variables )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile and run a Stan model and return a CmdStanMLE object. — tar_stan_mle_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. compile Character length 1. \"original\", cmdstan compile source file right running (skip compilation binary date). assumes worker access file. worker running remote computer access model file, set \"copy\" instead. compile = \"copy\" means pipeline read lines original Stan model file send worker. worker writes lines local copy compiles model , longer needs access original Stan model file local machine. However, result, Stan model re-compiles every time main target reruns. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) optimization algorithm. One \"lbfgs\", \"bfgs\", \"newton\". control parameters available \"lbfgs\" \"bfgs. default values details see CmdStan User's Guide. default values can also obtained running cmdstanr_example(method=\"optimize\")$metadata(). init_alpha (positive real) initial step size parameter. iter (positive integer) maximum number iterations. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. available L-BFGS.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_mle_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile and run a Stan model and return a CmdStanMLE object. — tar_stan_mle_run","text":"CmdStanFit object.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-process Stan output — tar_stan_output","title":"Post-process Stan output — tar_stan_output","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-process Stan output — tar_stan_output","text":"","code":"tar_stan_output(   fit,   output_type,   summaries,   summary_args,   transform,   variables,   inc_warmup,   data,   data_copy,   seed )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-process Stan output — tar_stan_output","text":"fit Stan fit object. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example. variables (character vector) variables include. inc_warmup Logical, whether include warmup draws. data List, Stan dataset. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. seed Integer vector, random number generator seed used run Stan.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-process Stan output — tar_stan_output","text":"data frame user-friendly Stan output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_rep_data_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a batch of data — tar_stan_rep_data_batch","title":"Generate a batch of data — tar_stan_rep_data_batch","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_rep_data_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a batch of data — tar_stan_rep_data_batch","text":"","code":"tar_stan_rep_data_batch(reps, batch, command)"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_rep_data_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a batch of data — tar_stan_rep_data_batch","text":"reps Positive integer length 1, number reps run. batch Positive integer length 1, index current batch. command R code run generate one dataset.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_rep_data_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a batch of data — tar_stan_rep_data_batch","text":"list Stan datasets containing data dataset IDs.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_rep_data_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a batch of data — tar_stan_rep_data_batch","text":"","code":"tar_stan_rep_data_batch(2, 1, tar_stan_example_data()) #> [[1]] #> [[1]]$n #> [1] 10 #>  #> [[1]]$x #>  [1] -1.0000000 -0.7777778 -0.5555556 -0.3333333 -0.1111111  0.1111111 #>  [7]  0.3333333  0.5555556  0.7777778  1.0000000 #>  #> [[1]]$y #>  [1] -1.8624114 -1.1858780 -2.1559287  0.1231455 -1.0782523 -0.8055015 #>  [7]  1.4449664  2.3451113 -0.1321133  0.7859858 #>  #> [[1]]$true_beta #> [1] 1.119918 #>  #> [[1]]$.join_data #> [[1]]$.join_data$beta #> [1] 1.119918 #>  #> [[1]]$.join_data$y_rep #>  [1] -1.8624114 -1.1858780 -2.1559287  0.1231455 -1.0782523 -0.8055015 #>  [7]  1.4449664  2.3451113 -0.1321133  0.7859858 #>  #>  #> [[1]]$.dataset_id #> [1] \"target_1\" #>  #> [[1]]$.seed #> [1] 1725770133 #>  #>  #> [[2]] #> [[2]]$n #> [1] 10 #>  #> [[2]]$x #>  [1] -1.0000000 -0.7777778 -0.5555556 -0.3333333 -0.1111111  0.1111111 #>  [7]  0.3333333  0.5555556  0.7777778  1.0000000 #>  #> [[2]]$y #>  [1]  0.86523646 -0.76986124 -0.15525822 -0.24505883  0.22120861 -0.07192590 #>  [7]  0.86480016  0.43591170 -2.17842401  0.05211211 #>  #> [[2]]$true_beta #> [1] 0.2090507 #>  #> [[2]]$.join_data #> [[2]]$.join_data$beta #> [1] 0.2090507 #>  #> [[2]]$.join_data$y_rep #>  [1]  0.86523646 -0.76986124 -0.15525822 -0.24505883  0.22120861 -0.07192590 #>  [7]  0.86480016  0.43591170 -2.17842401  0.05211211 #>  #>  #> [[2]]$.dataset_id #> [1] \"target_2\" #>  #> [[2]]$.seed #> [1] 1613816968 #>  #>"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"One summary of a CmdStanFit object — tar_stan_summary","title":"One summary of a CmdStanFit object — tar_stan_summary","text":"Create target run $summary() method CmdStanFit object.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One summary of a CmdStanFit object — tar_stan_summary","text":"","code":"tar_stan_summary(   name,   fit,   data = NULL,   variables = NULL,   summaries = NULL,   summary_args = NULL,   format = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One summary of a CmdStanFit object — tar_stan_summary","text":"name Symbol, base name collection targets. Serves prefix target names. fit Symbol, name CmdStanFit object upstream target returns CmdStanFit object. data Code generate data Stan model. variables (character vector) variables include. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One summary of a CmdStanFit object — tar_stan_summary","text":"tar_stan_summary() returns target object summarize CmdStanFit object. return value target tidy data frame summaries returned $summary() method CmdStanFit object. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One summary of a CmdStanFit object — tar_stan_summary","text":"tar_stan_mcmc() etc. summary = TRUE already gives target output $summary() method. Use tar_stan_summary() create additional specialized summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"One summary of a CmdStanFit object — tar_stan_summary","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One summary of a CmdStanFit object — tar_stan_summary","text":"","code":"# First, write your Stan model file, e.g. model.stan. # Then in _targets.R, write a pipeline like this: if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. # Running inside a temporary directory to avoid # modifying the user's file space. The file \"model.stan\" # created below lives in a temporary directory. # This satisfies CRAN policies. tar_stan_example_file(\"model.stan\") targets::tar_script({ library(stantargets) list(   # Run a model and produce default summaries.   tar_stan_mcmc(     your_model,     stan_files = \"model.stan\",     data = tar_stan_example_data()   ),   # Produce a more specialized summary   tar_stan_summary(     your_summary,     fit = your_model_mcmc_model,     data = your_model_data_model,     variables = \"beta\",     summaries = list(~quantile(.x, probs = c(0.25, 0.75)))   ) )}, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary_join_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Join some Stan data to summary output — tar_stan_summary_join_data","title":"Join some Stan data to summary output — tar_stan_summary_join_data","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary_join_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join some Stan data to summary output — tar_stan_summary_join_data","text":"","code":"tar_stan_summary_join_data(summaries, data)"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary_join_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join some Stan data to summary output — tar_stan_summary_join_data","text":"summaries data frame Stan posterior summaries. data Code generate data Stan model.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_summary_join_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join some Stan data to summary output — tar_stan_summary_join_data","text":"data frame user-friendly Stan output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb.html","id":null,"dir":"Reference","previous_headings":"","what":"One variational Bayes run per model with multiple outputs — tar_stan_vb","title":"One variational Bayes run per model with multiple outputs — tar_stan_vb","text":"Targets run Stan model variational Bayes save multiple outputs.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One variational Bayes run per model with multiple outputs — tar_stan_vb","text":"","code":"tar_stan_vb(   name,   stan_files,   data = list(),   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   iter = NULL,   grad_samples = NULL,   elbo_samples = NULL,   eta = NULL,   adapt_engaged = NULL,   adapt_iter = NULL,   tol_rel_obj = NULL,   eval_elbo = NULL,   output_samples = NULL,   sig_figs = NULL,   variables = NULL,   variables_fit = NULL,   summaries = list(),   summary_args = list(),   return_draws = TRUE,   return_summary = TRUE,   draws = NULL,   summary = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One variational Bayes run per model with multiple outputs — tar_stan_vb","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector Stan model files. supply multiple files, model run one shared dataset generated code data. supply unnamed vector, fs::path_ext_remove(basename(stan_files)) used target name suffixes. stan_files named vector, suffixed come names(stan_files). data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) algorithm. Either \"meanfield\" \"fullrank\". iter (positive integer) maximum number iterations. grad_samples (positive integer) number samples Monte Carlo estimate gradients. elbo_samples (positive integer) number samples Monte Carlo estimate ELBO (objective function). eta (positive real) step size weighting parameter adaptive step size sequence. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_iter (positive integer) maximum number adaptation iterations. tol_rel_obj (positive real) Convergence tolerance relative norm objective. eval_elbo (positive integer) Evaluate ELBO every Nth iteration. output_samples (positive integer) Use draws argument instead. output_samples deprecated future. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. variables (character vector) variables include. variables_fit Character vector variables include big CmdStanFit object returned model fit target. variables argument, contrast, \"draws\" target . \"draws\" target can access variables CmdStanFit target. Control variables variables variables_fit arguments. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. return_draws Logical, whether create target posterior draws. Saves posterior::as_draws_df(fit$draws()) compressed tibble. Convenient, duplicates storage. return_summary Logical, whether create target fit$summary(). draws Deprecated 2022-07-22. Use return_draws instead. summary Deprecated 2022-07-22. Use return_summary instead. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One variational Bayes run per model with multiple outputs — tar_stan_vb","text":"tar_stan_vb() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_vb(name = x, stan_files = \"y.stan\", ...) follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: run R expression data argument produce Stan dataset model. Returns Stan data list. x_vb_y: run variational Bayes model dataset. Returns cmdstanr CmdStanVB object results. x_draws_y: extract draws x_vb_y. Omitted draws = FALSE. Returns tidy data frame draws. x_summary_y: extract compact summaries x_vb_y. Returns tidy data frame summaries. Omitted summary = FALSE.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One variational Bayes run per model with multiple outputs — tar_stan_vb","text":"arguments passed $compile(), $variational(), $summary() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"One variational Bayes run per model with multiple outputs — tar_stan_vb","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One variational Bayes run per model with multiple outputs — tar_stan_vb","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_vb(     your_model,     stan_files = path,     data = tar_stan_example_data(),     variables = \"beta\",     summaries = list(~quantile(.x, probs = c(0.25, 0.75))),     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple iterations per model of variational Bayes with tidy output — tar_stan_vb_rep","title":"Multiple iterations per model of variational Bayes with tidy output — tar_stan_vb_rep","text":"Internal function. Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple iterations per model of variational Bayes with tidy output — tar_stan_vb_rep","text":"","code":"tar_stan_vb_rep(   name,   stan_files,   data = list(),   output_type = c(\"summary\", \"draws\"),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   iter = NULL,   grad_samples = NULL,   elbo_samples = NULL,   eta = NULL,   adapt_engaged = NULL,   adapt_iter = NULL,   tol_rel_obj = NULL,   eval_elbo = NULL,   output_samples = NULL,   sig_figs = NULL,   data_copy = character(0),   variables = NULL,   summaries = NULL,   summary_args = NULL,   transform = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple iterations per model of variational Bayes with tidy output — tar_stan_vb_rep","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) algorithm. Either \"meanfield\" \"fullrank\". iter (positive integer) maximum number iterations. grad_samples (positive integer) number samples Monte Carlo estimate gradients. elbo_samples (positive integer) number samples Monte Carlo estimate ELBO (objective function). eta (positive real) step size weighting parameter adaptive step size sequence. adapt_engaged (logical) warmup adaptation? adapt_iter (positive integer) maximum number adaptation iterations. tol_rel_obj (positive real) Convergence tolerance relative norm objective. eval_elbo (positive integer) Evaluate ELBO every Nth iteration. output_samples (positive integer) Use draws argument instead. output_samples deprecated future. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple iterations per model of variational Bayes with tidy output — tar_stan_vb_rep","text":"list target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Developers can consult design specification https://books.ropensci.org/targets-design/ learn structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple iterations per model of variational Bayes with tidy output — tar_stan_vb_rep","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"tar_stan_vb_rep_draws() creates targets run variational Bayes multiple times per model save draws run.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"","code":"tar_stan_vb_rep_draws(   name,   stan_files,   data = list(),   batches = 1L,   reps = 1L,   combine = FALSE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   iter = NULL,   grad_samples = NULL,   elbo_samples = NULL,   eta = NULL,   adapt_engaged = NULL,   adapt_iter = NULL,   tol_rel_obj = NULL,   eval_elbo = NULL,   output_samples = NULL,   sig_figs = NULL,   data_copy = character(0),   variables = NULL,   transform = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = \"transient\",   garbage_collection = TRUE,   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) algorithm. Either \"meanfield\" \"fullrank\". iter (positive integer) maximum number iterations. grad_samples (positive integer) number samples Monte Carlo estimate gradients. elbo_samples (positive integer) number samples Monte Carlo estimate ELBO (objective function). eta (positive real) step size weighting parameter adaptive step size sequence. adapt_engaged (logical) warmup adaptation? adapt_iter (positive integer) maximum number adaptation iterations. tol_rel_obj (positive real) Convergence tolerance relative norm objective. eval_elbo (positive integer) Evaluate ELBO every Nth iteration. output_samples (positive integer) Use draws argument instead. output_samples deprecated future. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"tar_stan_vb_rep_summaries() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_vb_rep_draws(name = x, stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run variational Bayes per dataset. dynamic branch returns tidy data frames draws corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame draws.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"Draws take lot storage. storage becomes excessive, please consider thinning draws using tar_stan_vb_rep_summaries() instead. arguments passed $compile() $variational() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple variational Bayes runs per model with draws — tar_stan_vb_rep_draws","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_vb_rep_draws(     your_model,     stan_files = path,     data = tar_stan_example_data(),     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Stan model and return only the summaries. — tar_stan_vb_rep_run","title":"Run a Stan model and return only the summaries. — tar_stan_vb_rep_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Stan model and return only the summaries. — tar_stan_vb_rep_run","text":"","code":"tar_stan_vb_rep_run(   stan_file,   stan_name,   stan_path,   data,   output_type,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   refresh,   init,   save_latent_dynamics,   output_dir,   algorithm,   iter,   grad_samples,   elbo_samples,   eta,   adapt_engaged,   adapt_iter,   tol_rel_obj,   eval_elbo,   output_samples,   sig_figs,   data_copy,   variables,   summaries,   summary_args,   transform )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Stan model and return only the summaries. — tar_stan_vb_rep_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. stan_name Friendly suffix Stan model target. stan_path Original path input Stan file. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. output_type Type output create, either \"summaries\", \"draws\", \"diagnostics\". compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) algorithm. Either \"meanfield\" \"fullrank\". iter (positive integer) maximum number iterations. grad_samples (positive integer) number samples Monte Carlo estimate gradients. elbo_samples (positive integer) number samples Monte Carlo estimate ELBO (objective function). eta (positive real) step size weighting parameter adaptive step size sequence. adapt_engaged (logical) warmup adaptation? adapt_iter (positive integer) maximum number adaptation iterations. tol_rel_obj (positive real) Convergence tolerance relative norm objective. eval_elbo (positive integer) Evaluate ELBO every Nth iteration. output_samples (positive integer) Use draws argument instead. output_samples deprecated future. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. transform Symbol NULL, name function accepts arguments data draws returns data frame. , data JAGS data list supplied model, draws data frame one column per model parameter one row per posterior sample. arguments data draws must valid default values stantargets populate . See simulation-based calibration (SBC) section simulation vignette example.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a Stan model and return only the summaries. — tar_stan_vb_rep_run","text":"data frame posterior summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"tar_stan_vb_rep_summaries() creates targets run variational Bayes multiple times save summary output run.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"","code":"tar_stan_vb_rep_summary(   name,   stan_files,   data = list(),   batches = 1L,   reps = 1L,   combine = TRUE,   compile = c(\"original\", \"copy\"),   quiet = TRUE,   stdout = NULL,   stderr = NULL,   dir = NULL,   pedantic = FALSE,   include_paths = NULL,   cpp_options = list(),   stanc_options = list(),   force_recompile = FALSE,   seed = NULL,   refresh = NULL,   init = NULL,   save_latent_dynamics = FALSE,   output_dir = NULL,   algorithm = NULL,   iter = NULL,   grad_samples = NULL,   elbo_samples = NULL,   eta = NULL,   adapt_engaged = NULL,   adapt_iter = NULL,   tol_rel_obj = NULL,   eval_elbo = NULL,   output_samples = NULL,   sig_figs = NULL,   data_copy = character(0),   variables = NULL,   summaries = list(),   summary_args = list(),   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = \"qs\",   format_df = \"fst_tbl\",   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"name Symbol, base name collection targets. Serves prefix target names. stan_files Character vector paths known existing Stan model files created running pipeline. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. batches Number batches. batch sequence branch targets containing multiple reps. rep generates dataset runs model . reps Number replications per batch. combine Logical, whether create target combine model results single data frame downstream. Convenient, duplicates data. compile (logical) compilation? default TRUE. FALSE compilation can done later via $compile() method. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) algorithm. Either \"meanfield\" \"fullrank\". iter (positive integer) maximum number iterations. grad_samples (positive integer) number samples Monte Carlo estimate gradients. elbo_samples (positive integer) number samples Monte Carlo estimate ELBO (objective function). eta (positive real) step size weighting parameter adaptive step size sequence. adapt_engaged (logical) warmup adaptation? adapt_iter (positive integer) maximum number adaptation iterations. tol_rel_obj (positive real) Convergence tolerance relative norm objective. eval_elbo (positive integer) Evaluate ELBO every Nth iteration. output_samples (positive integer) Use draws argument instead. output_samples deprecated future. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space. data_copy Character vector names scalars data. values inserted columns output data frame rep. join just scalars, include .join_data element Stan data list names dimensions corresponding model. details, read https://docs.ropensci.org/stantargets/articles/simulation.html. variables (character vector) Optionally, names variables (parameters, transformed parameters, generated quantities) read . NULL (default) variables included. empty string (variables=\"\") none included. non-scalar variables elements specific elements can selected: variables = \"theta\" selects elements theta; variables = c(\"theta[1]\", \"theta[3]\") selects 1st 3rd elements. summaries Optional list summary functions passed ... posterior::summarize_draws() $summary() CmdStanFit object. summary_args Optional list summary function arguments passed .args posterior::summarize_draws() $summary() CmdStanFit object. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format data frame posterior summaries. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). format_df Character length 1, storage format data frame targets posterior draws. recommend efficient data frame formats \"feather\" \"aws_parquet\". storage formats, see help file targets::tar_target(). repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"tar_stan_vb_rep_summaries() returns list target objects. See \"Target objects\" section background. target names use name argument prefix, individual elements stan_files appear suffixes applicable. example, specific target objects returned tar_stan_vb_rep_summary(name = x,  stan_files = \"y.stan\") follows. x_file_y: reproducibly track Stan model file. Returns character vector paths model file compiled executable. x_lines_y: read Stan model file safe transport parallel workers. Omitted compile = \"original\". Returns character vector lines model file. x_data: use dynamic branching generate multiple datasets repeatedly running R expression data argument. dynamic branch returns batch Stan data lists x_y supplies model. x_y: dynamic branching target run variational Bayes per dataset. dynamic branch returns tidy data frames summaries corresponding batch Stan data x_data. x: combine branches x_y single non-dynamic target. Suppressed combine FALSE. Returns long tidy data frame summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"arguments passed $compile() $variational() methods CmdStanModel class. previously compiled model upstream tar_stan_compile() target, model recompile.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":"seeds","dir":"Reference","previous_headings":"","what":"Seeds","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"Rep-specific random number generator seeds data models automatically set based seed argument, batch, rep, parent target name, tar_option_get(\"seed\"). ensures rep-specific seeds change change batching configuration (e.g. 40 batches 10 reps vs 20 batches 20 reps ). data seed .seed list element output, Stan seed .seed column Stan model output.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"stantargets functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_rep_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiple iterations per model of variational Bayes with summaries — tar_stan_vb_rep_summary","text":"","code":"if (Sys.getenv(\"TAR_LONG_EXAMPLES\") == \"true\") { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({ library(stantargets) # Do not use temporary storage for stan files in real projects # or else your targets will always rerun. path <- tempfile(pattern = \"\", fileext = \".stan\") tar_stan_example_file(path = path) list(   tar_stan_vb_rep_summary(     your_model,     stan_files = path,     data = tar_stan_example_data(),     batches = 2,     reps = 2,     stdout = R.utils::nullfile(),     stderr = R.utils::nullfile()   ) ) }, ask = FALSE) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile and run a Stan model and return a CmdStanVB object. — tar_stan_vb_run","title":"Compile and run a Stan model and return a CmdStanVB object. — tar_stan_vb_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile and run a Stan model and return a CmdStanVB object. — tar_stan_vb_run","text":"","code":"tar_stan_vb_run(   stan_file,   data,   compile,   quiet,   stdout,   stderr,   dir,   pedantic,   include_paths,   cpp_options,   stanc_options,   force_recompile,   seed,   refresh,   init,   save_latent_dynamics,   output_dir,   algorithm,   iter,   grad_samples,   elbo_samples,   eta,   adapt_engaged,   adapt_iter,   tol_rel_obj,   eval_elbo,   output_samples,   sig_figs,   variables )"},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile and run a Stan model and return a CmdStanVB object. — tar_stan_vb_run","text":"stan_file (string) path .stan file containing Stan program. helper function write_stan_file() provided cases convenient specify Stan program string. stan_file specified exe_file must specified. data (multiple options) data use variables specified data block Stan program. One following: named list R objects names corresponding variables declared data block Stan program. Internally list written JSON CmdStan using write_stan_json(). See write_stan_json() details conversions performed R objects passed Stan. path data file compatible CmdStan (JSON R dump). See appendices CmdStan guide details using formats. NULL empty list Stan program data block. compile Character length 1. \"original\", cmdstan compile source file right running (skip compilation binary date). assumes worker access file. worker running remote computer access model file, set \"copy\" instead. compile = \"copy\" means pipeline read lines original Stan model file send worker. worker writes lines local copy compiles model , longer needs access original Stan model file local machine. However, result, Stan model re-compiles every time main target reruns. quiet (logical) verbose output CmdStan compilation suppressed? default TRUE, encounter error recommend trying quiet=FALSE see output. stdout Character length 1, file path write stdout stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stdout. apply messages, warnings, errors. stderr Character length 1, file path write stderr stream model runs. Set NULL print console. Set R.utils::nullfile() suppress stderr. apply messages, warnings, errors. dir (string) path directory store CmdStan executable (.hpp file using $save_hpp_file()). default location Stan program. pedantic (logical) pedantic mode turned ? default FALSE. Pedantic mode attempts warn potential issues Stan program beyond syntax errors. details see Pedantic mode chapter Stan Reference Manual. Note: pedantic check model without compiling model already compiled $check_syntax() method can used instead. include_paths (character vector) Paths directories Stan look files specified #include directives Stan program. cpp_options (list) makefile options used compiling model (STAN_THREADS, STAN_MPI, STAN_OPENCL, etc.). Anything otherwise write make/local file. example using threading see Stan case study Reduce Sum: Minimal Example. stanc_options (list) Stan--C++ transpiler options used compiling model. See Examples section well stanc chapter CmdStan Guide details available options: https://mc-stan.org/docs/cmdstan-guide/stanc.html. force_recompile (logical) model recompiled even modified since last compiled. default FALSE. Can also set via global cmdstanr_force_recompile option. seed (positive integer(s)) seed (P)RNG pass CmdStan. case multi-chain sampling single seed automatically augmented run (chain) ID chain uses different seed. exception transformed data block, defaults using seed chains data generated chains RNG functions used. time seed specified vector (one element per chain) RNG functions used transformed data goal generate different data chain. refresh (non-negative integer) number iterations printed screen updates. refresh = 0, error messages printed. init (multiple options) initialization method use variables declared parameters block Stan program. One following: real number x>0. initializes parameters randomly [-x,x] unconstrained parameter space.; number 0. initializes parameters 0; character vector paths (one per chain) JSON Rdump files containing initial values parameters. See write_stan_json() write R objects JSON files compatible CmdStan. list lists containing initial values parameters. MCMC list contain sublist chain. model fitting methods just one sublist. sublists named elements corresponding parameters specifying initial values. See Examples. function returns single list names corresponding parameters specifying initial values. function can take arguments single argument chain_id. MCMC, function argument chain_id supplied chain id (1 number chains) called generate initial values. See Examples. save_latent_dynamics (logical) auxiliary diagnostic information latent dynamics written temporary diagnostic CSV files? argument replaces CmdStan's diagnostic_file argument content written CSV controlled user's CmdStan installation CmdStanR (algorithms content may written). default FALSE, appropriate almost every use case. save temporary files created save_latent_dynamics=TRUE see $save_latent_dynamics_files() method. output_dir (string) path directory CmdStan write output CSV files. interactive use can typically left NULL (temporary directory) since CmdStanR makes CmdStan output (posterior draws diagnostics) available R via methods fitted model objects. behavior output_dir follows: NULL (default), CSV files written temporary directory saved permanently user calls one $save_* methods fitted model object (e.g., $save_output_files()). temporary files removed fitted model object garbage collected (manually automatically). path, files created output_dir names corresponding defaults used $save_output_files(). algorithm (string) algorithm. Either \"meanfield\" \"fullrank\". iter (positive integer) maximum number iterations. grad_samples (positive integer) number samples Monte Carlo estimate gradients. elbo_samples (positive integer) number samples Monte Carlo estimate ELBO (objective function). eta (positive real) step size weighting parameter adaptive step size sequence. adapt_engaged (logical) warmup adaptation? default TRUE. precomputed inverse metric specified via inv_metric argument (metric_file) , adapt_engaged=TRUE, Stan use provided inverse metric just initial guess adaptation. turn adaptation using precomputed inverse metric set adapt_engaged=FALSE. adapt_iter (positive integer) maximum number adaptation iterations. tol_rel_obj (positive real) Convergence tolerance relative norm objective. eval_elbo (positive integer) Evaluate ELBO every Nth iteration. output_samples (positive integer) Use draws argument instead. output_samples deprecated future. sig_figs (positive integer) number significant figures used storing output values. default, CmdStan represent output values 6 significant figures. upper limit sig_figs 18. Increasing value result larger output CSV files thus increased usage disk space.","code":""},{"path":"https://docs.ropensci.org/stantargets/reference/tar_stan_vb_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile and run a Stan model and return a CmdStanVB object. — tar_stan_vb_run","text":"CmdStanFit object.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-0109001-development","dir":"Changelog","previous_headings":"","what":"stantargets 0.1.0.9001 (development)","title":"stantargets 0.1.0.9001 (development)","text":"Remove temporary files generated CmdStan. Add new description arguments tar_target() (`targets >= 1.5.1.9001). Append model file information target descriptions using tar_map() (tarchetypes >= 0.7.12.9001).","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-010","dir":"Changelog","previous_headings":"","what":"stantargets 0.1.0","title":"stantargets 0.1.0","text":"Add new transform argument tar_stan_*_rep_draws() functions (except mle) support simulation-based calibration (SBC) (#31, @mike-lawrence, @martinmodrak, @dmi3kno).","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-006","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.6","title":"stantargets 0.0.6","text":"Implement resilient rep-specific seeds change batching structure changes.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-005","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.5","title":"stantargets 0.0.5","text":"Update signatures user-side functions accommodate changes cmdstanr 0.2.0 0.5.0 (https://github.com/ropensci/targets/discussions/884, @stuvet). Add new arguments variables_fit inc_warmup_fit passed CmdStanFit target tar_stan_mcmc() instead variables inc_warmup (#56, @yizhang-yiz). variables argument tar_stan_gq(), tar_stan_mle(), tar_stan_vb().","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-004","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.4","title":"stantargets 0.0.4","text":"Support repository argument targets >= 0.11.0. Append new .dataset_id column target outputs aid model comparisons across datasets.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-003","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.3","title":"stantargets 0.0.3","text":"Update docs changes cmdstanr, posterior, targets.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-002","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.2","title":"stantargets 0.0.2","text":"Reference JOSS paper.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-001","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.1","title":"stantargets 0.0.1","text":"Skip tests CmdStan installed (@sakrejda). Use custom generate_data() function docs, opposed tar_stan_example_data() directly (@sakrejda). Add pedantic argument compilation (@sakrejda). Reduce dependencies rlang functions like sym() (@sakrejda). Change trn() if_any() (@mattwarkentin, @sakrejda, @tjmahr). Add @sakrejda @mattwarkentin reviewers DESCRIPTION. Talk R package system dependencies stantargets README (@mattwarkentin). Throw error earlier Stan file exist (@sakrejda, @mattwarkentin) Use @format roxygen2 tag data generation (@mattwarkentin). Use @family go cross-reference functions (@mattwarkentin). Elaborate roles return values specific targets generated target factories (@mattwarkentin). Undergo rOpenSci peer review transition rOpenSci. Link example project.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-0009002","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.0.9002","title":"stantargets 0.0.0.9002","text":"Return executable file Stan source file model compilation targets. Replace log argument stdout stderr (#23). Switch meaning %||% %|||% conform historical precedent.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-0009001","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.0.9001","title":"stantargets 0.0.0.9001","text":"Join data summary output using .join_data Stan data (#18). Pre-compile models testing add environment variable skip tests always force recompilation (#19). Load packages target computing summaries.","code":""},{"path":"https://docs.ropensci.org/stantargets/news/index.html","id":"stantargets-0009000","dir":"Changelog","previous_headings":"","what":"stantargets 0.0.0.9000","title":"stantargets 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
